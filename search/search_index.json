{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-23 \u042f - \u041a\u0440\u0438\u0432\u0446\u043e\u0432 \u041f\u0430\u0432\u0435\u043b - \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0433\u0440\u0443\u043f\u043f\u044b K33402 \u0438 \u044d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442 - \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u043c\u043e\u0438\u043c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.","title":"Home"},{"location":"#web-2022-23","text":"\u042f - \u041a\u0440\u0438\u0432\u0446\u043e\u0432 \u041f\u0430\u0432\u0435\u043b - \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0433\u0440\u0443\u043f\u043f\u044b K33402 \u0438 \u044d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442 - \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a \u043c\u043e\u0438\u043c \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 2022-23"},{"location":"practicalWorks/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u044f\u0442\u0438 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043f\u0440\u0430\u0432 \u0434\u043b\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041f\u0430\u0432\u0435\u043b\u201d \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0435\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e get() , \u043b\u0438\u0431\u043e \u0432\u0437\u044f\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u0437 QuerySet : DriversLicense.objects.get(owner_id=drivers[0]) // or queryset = DriversLicense.objects.filter(owner_id=drivers[0]) queryset[0] \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0447\u0435\u0440\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d CarOwner.objects.filter(cars__color=\"black\").distinct() \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2021 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0430\u0442\u0443 \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 Car.objects.values(\"make\").annotate(Count(\"id\")) \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f CarOwner.objects.order_by(\"driverslicense__date_of_issue\").distinct()","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"practicalWorks/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1"},{"location":"practicalWorks/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u044f\u0442\u0438 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 \u0430\u0441\u0441\u043e\u0446\u0438\u0430\u0442\u0438\u0432\u043d\u044b\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0441 \u043c\u0430\u0448\u0438\u043d\u0430\u043c\u0438 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043f\u0440\u0430\u0432 \u0434\u043b\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"practicalWorks/#2","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041f\u0430\u0432\u0435\u043b\u201d \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0435\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442 \u043c\u043e\u0434\u0435\u043b\u0438, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e get() , \u043b\u0438\u0431\u043e \u0432\u0437\u044f\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438\u0437 QuerySet : DriversLicense.objects.get(owner_id=drivers[0]) // or queryset = DriversLicense.objects.filter(owner_id=drivers[0]) queryset[0] \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0447\u0435\u0440\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d CarOwner.objects.filter(cars__color=\"black\").distinct() \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2021","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"practicalWorks/#3","text":"\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0430\u0442\u0443 \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 Car.objects.values(\"make\").annotate(Count(\"id\")) \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f CarOwner.objects.order_by(\"driverslicense__date_of_issue\").distinct()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"labs/lr1/","text":"Tasks 1-3 \u0414\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 1 \u043f\u043e 3 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u043d\u0435\u0441\u0435\u043d\u044b \u0434\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0430, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u0438: server.py import socket class Server: def __init__(self, protocol_type: str): if protocol_type == \"UDP\": self.socket = self.__create_UDP_socket() elif protocol_type == \"TCP\": self.socket = self.__create_TCP_socket() def __create_TCP_socket(self) -> socket: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((socket.gethostname(), 1234)) sock.listen(1) return sock def __create_UDP_socket(self): sock = socket.socket() sock.bind((socket.gethostname(), 1234)) sock.listen(1) return sock def send_data_to_client(self, client_socket: socket.socket, data: str): client_socket.send(data.encode()) def get_data_from_client(self, client_socket: socket.socket) -> str: encoded_data = client_socket.recv(1024) data = encoded_data.decode(\"utf-8\") return data def accept_connection(self) -> (socket, tp.Any): return self.socket.accept() client.py import socket class Client: def __init__(self, protocol_type: str): if protocol_type == \"UDP\": self.socket = self.__create_UDP_socket() elif protocol_type == \"TCP\": self.socket = self.__create_TCP_socket() def __create_TCP_socket(self): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((socket.gethostname(), 1234)) return sock def __create_UDP_socket(self): sock = socket.socket() sock.connect((socket.gethostname(), 1234)) return sock def send_data_to_server(self, data: str): self.socket.send(data.encode()) def get_data_from_server(self) -> str: encoded_data = self.socket.recv(1024) data = encoded_data.decode(\"utf-8\") return data Task 1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u043e\u043e\u0442\u043e\u043a\u043e\u043b UDP. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f server.py from Lr1.server import Server class FirstTaskServer(Server): def start(self): # create connection client_socket, address = self.accept_connection() self.send_data_to_client(client_socket, \"Hello, client\") client_data = self.get_data_from_client(client_socket) print(client_data) client_socket.close() self.socket.close() client.py from Lr1.client import Client class FirstTaskClient(Client): def start(self): self.send_data_to_server(\"Hello, server!\") server_data = self.get_data_from_server() print(server_data) self.socket.close() \u0417\u0430\u043f\u0443\u0441\u043a server = FirstTaskServer(\"UDP\") server.start() client = FirstTaskClient(\"UDP\") client.start() Task 2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0440\u0430\u0441\u0447\u0435\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0437\u0430\u0434\u0430\u0432\u0430\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0434\u0432\u0443\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u0432 \u0442\u0440\u0435\u0445\u043c\u0435\u0440\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f server.py from Lr1.server import Server import typing as tp class SecondTaskServer(Server): def start(self): client_socket, address = self.accept_connection() while not self.area: while len(self.vectors) < 2: if len(self.vectors) == 0: self.send_data_to_client(client_socket, \"First vector\") else: self.send_data_to_client(client_socket, \"Second vector\") data = self.get_data_from_client(client_socket) self._set_vector_from_data(data) self._set_area() client_socket.send(str(self.area).encode()) client_socket.close() self.socket.close() def _set_vector_from_data(self, data: str): coords = tuple(map(float, data.split())) self.vectors.append(coords) def _set_area(self): x = self.vectors[0][1] * self.vectors[1][2] - self.vectors[0][2] * self.vectors[1][1] y = self.vectors[0][0] * self.vectors[1][2] - self.vectors[0][2] * self.vectors[1][0] z = self.vectors[0][0] * self.vectors[1][1] - self.vectors[0][1] * self.vectors[1][0] self.area = (x**2 + y**2 + z**2)**0.5 def __init__(self, protocol_type: str): super().__init__(protocol_type) self.vectors: tp.List[tp.Tuple[float, ...]] = [] self.area = 0.0 client.py from Lr1.client import Client class SecondTaskClient(Client): def start(self): first_vector = input(\"Enter first vector's coordinates x, y, z: \") second_vector = input(\"Enter second vector's coordinates x, y, z: \") while True: data = self.get_data_from_server() if data == \"First vector\": self.send_data_to_server(first_vector) elif data == \"Second vector\": self.send_data_to_server(second_vector) else: print(data) break self.socket.close() \u0417\u0430\u043f\u0443\u0441\u043a server = SecondTaskServer(\"TCP\") server.start() client = SecondTaskClient(\"TCP\") client.start() Task 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f server.py class ThirdTaskServer(Server): def start(self): client_socket, address = self.accept_connection() self._get_content() self._send_page_to_client(client_socket) client_socket.close() self.socket.close() def _get_content(self): with open(\"index.html\", \"r\") as file: self.content = file.read() def _send_page_to_client(self, client_socket): page_info = f'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n{self.content}' self.send_data_to_client(client_socket, page_info) def __init__(self, protocol_type: str): super().__init__(protocol_type) self.content = \"\" \u0417\u0430\u043f\u0443\u0441\u043a server = ThirdTaskServer(\"TCP\") server.start() Task 4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f server.py import socket import threading import typing as tp class User: def __init__(self, name: str, sock: socket.socket): self.name = name self.sock = sock class ChatServer: def __init__(self): self.alive = True self.sock = self.__create_tcp_socket() self.users: tp.List[User] = [] def __create_tcp_socket(self) -> socket.socket: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((socket.gethostname(), 1234)) sock.listen() return sock def __send_data_to_user(self, user_socket: socket.socket, data: str): try: user_socket.send(data.encode()) except: pass def __get_data_from_user(self, user_socket: socket.socket) -> str: data = \"\" try: data = user_socket.recv(1024).decode() finally: return data def __remove_user_from_chat(self, user: User): user.sock.close() self.users.remove(user) self.send_broadcast_message(None, f'{user.name} has left the chat') def switch_off(self): self.alive = False for user in self.users: self.__send_data_to_user(user.sock, \"!END\") user.sock.close() self.sock.close() def send_broadcast_message(self, author: tp.Optional[str], text: str): if author is None: data = f\"{text}\" else: data = f\"{author}: {text}\" for user in self.users: self.__send_data_to_user(user.sock, data) def handle_connection(self, user: User): try: while self.alive: message = self.__get_data_from_user(user.sock) if message != \"!QUIT\": self.send_broadcast_message(user.name, message) else: break finally: self.__remove_user_from_chat(user) def serve_forever(self): while self.alive: user_socket, _ = self.sock.accept() self.__send_data_to_user(user_socket, \"Enter Username\") username = self.__get_data_from_user(user_socket) user = User(username, user_socket) self.users.append(user) self.send_broadcast_message(None, f\"{username} has connected to the chat\") thread = threading.Thread(target=self.handle_connection, args=(user,)) thread.start() def start(self): try: self.serve_forever() except KeyboardInterrupt: self.switch_off() client.py import threading class ChatClient: def __init__(self): self.username = \"\" self.alive = True self.sock = self.__create_tcp_socket() def __create_tcp_socket(self) -> socket.socket: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((socket.gethostname(), 1234)) return sock def __send_data_to_server(self, data: str): if self.alive: self.sock.send(data.encode()) def __get_data_from_server(self) -> str: return self.sock.recv(1024).decode() def __left_from_server(self): self.alive = False self.sock.close() print(\"You have left the chat\") def receive(self): try: while self.alive: message = self.__get_data_from_server() if message == \"Enter Username\": self.__send_data_to_server(self.username) elif message == \"!END\": print(\"The server was interrupted\") break else: print(message) finally: self.__left_from_server() def send(self): while self.alive: message = input() self.__send_data_to_server(message) if message == \"!QUIT\": self.alive = False def start(self): self.username = input(\"Enter username: \") get_thread = threading.Thread(target=self.receive) get_thread.start() send_thread = threading.Thread(target=self.send) send_thread.start() \u0417\u0430\u043f\u0443\u0441\u043a # \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440 ChatServer().start() # \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ChatClient().start() Task 5 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f request.py import typing as tp from urllib.parse import parse_qs, urlparse class Request: def __init__( self, method: str, target: str, version: str, headers: tp.Dict[str, tp.Any] ): self.method = method self.target = target self.version = version self.headers = headers @property def path(self): return self._url.path @property def query(self): return parse_qs(self._url.query) @property def _url(self): return urlparse(self.target) response.py import typing as tp class Response: def __init__( self, status: int, reason: str, headers: tp.Optional[tp.Dict[str, tp.Any]] = None, body: tp.Optional[bytes] = None ): self.status = status self.reason = reason self.headers = headers self.body = body server.py import email.message import socket import typing as tp import json from Lr1.task5.request import Request from Lr1.task5.response import Response from email.parser import Parser MAX_LINE = 64 * 1024 MAX_HEADERS = 100 class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body class HTTPServer: def __init__(self, host: str, port: int): self.server: tp.Optional[socket.socket] = self.__create_tcp_socket(host, port) self._grades: tp.Dict[str, int] = {} def __create_tcp_socket(self, host: str, port: int) -> tp.Optional[socket.socket]: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: sock.bind((host, port)) sock.listen() return sock except socket.error: sock.close() return None def __map_message_to_dict(self, message: email.message.Message) -> tp.Dict[str, tp.Any]: res_dict = {} for key in message.keys(): res_dict[key] = message[key] return res_dict def __handle_post_grades(self, req: Request) -> Response: try: subject = req.query['subject'][0] grade = req.query['grade'][0] self._grades[subject] = int(grade) except Exception: raise HTTPError(400, \"Bad Request\") return Response(204, 'Created') def __handle_get_grades(self, req: Request) -> Response: accept = req.headers.get('Accept') if accept is None: raise HTTPError(400, \"Bad Request\") if 'application/json' in accept: content_type = 'application/json; charset=utf-8' body = json.dumps(self._grades) else: return Response(406, 'Not Acceptable') headers = {'Content-Type': content_type, 'Content-Length': len(body)} return Response(200, 'OK', headers, body.encode('utf-8')) def serve_forever(self): if self.server is None: return try: while True: conn, _ = self.server.accept() try: self.serve_client(conn) except Exception as e: print('Client serving failed', e) except KeyboardInterrupt: self.server.close() def serve_client(self, conn: socket.socket): try: req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) except ConnectionResetError: conn = None except HTTPError as e: self.send_error(conn, e) if conn: conn.close() def parse_request(self, conn) -> Request: rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, ver, headers) def parse_headers(self, rfile) -> tp.Dict[str, tp.Any]: headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise HTTPError(494, 'Request header too large') if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('iso-8859-1') message = Parser().parsestr(sheaders) return self.__map_message_to_dict(message) def parse_request_line(self, rfile) -> tp.Tuple[str, ...]: raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise HTTPError(400, 'Bad request', 'Request line is too long') req_line = str(raw, 'iso-8859-1') req_line = req_line.rstrip('\\r\\n') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', 'Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver def handle_request(self, req: Request) -> Response: if req.path == '/api' and req.method == 'POST': return self.__handle_post_grades(req) if req.path == '/api' and req.method == 'GET': return self.__handle_get_grades(req) raise HTTPError(404, 'Not found') def send_response(self, conn: socket.socket, resp: Response): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers.items(): header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn: socket.socket, err: HTTPError): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except Exception: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response( status, reason, {'Content-Length': len(body)}, body ) self.send_response(conn, resp) \u0417\u0430\u043f\u0443\u0441\u043a host = \"127.0.0.1\" port = 1234 serv = HTTPServer(host, port) serv.serve_forever()","title":"Lab \u21161"},{"location":"labs/lr1/#tasks-1-3","text":"\u0414\u043b\u044f \u0437\u0430\u0434\u0430\u0447 \u0441 1 \u043f\u043e 3 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u043d\u0435\u0441\u0435\u043d\u044b \u0434\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0430, \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0449\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u0438: server.py import socket class Server: def __init__(self, protocol_type: str): if protocol_type == \"UDP\": self.socket = self.__create_UDP_socket() elif protocol_type == \"TCP\": self.socket = self.__create_TCP_socket() def __create_TCP_socket(self) -> socket: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((socket.gethostname(), 1234)) sock.listen(1) return sock def __create_UDP_socket(self): sock = socket.socket() sock.bind((socket.gethostname(), 1234)) sock.listen(1) return sock def send_data_to_client(self, client_socket: socket.socket, data: str): client_socket.send(data.encode()) def get_data_from_client(self, client_socket: socket.socket) -> str: encoded_data = client_socket.recv(1024) data = encoded_data.decode(\"utf-8\") return data def accept_connection(self) -> (socket, tp.Any): return self.socket.accept() client.py import socket class Client: def __init__(self, protocol_type: str): if protocol_type == \"UDP\": self.socket = self.__create_UDP_socket() elif protocol_type == \"TCP\": self.socket = self.__create_TCP_socket() def __create_TCP_socket(self): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((socket.gethostname(), 1234)) return sock def __create_UDP_socket(self): sock = socket.socket() sock.connect((socket.gethostname(), 1234)) return sock def send_data_to_server(self, data: str): self.socket.send(data.encode()) def get_data_from_server(self) -> str: encoded_data = self.socket.recv(1024) data = encoded_data.decode(\"utf-8\") return data","title":"Tasks 1-3"},{"location":"labs/lr1/#task-1","text":"","title":"Task 1"},{"location":"labs/lr1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u0440\u043e\u043e\u0442\u043e\u043a\u043e\u043b UDP. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"labs/lr1/#_2","text":"server.py from Lr1.server import Server class FirstTaskServer(Server): def start(self): # create connection client_socket, address = self.accept_connection() self.send_data_to_client(client_socket, \"Hello, client\") client_data = self.get_data_from_client(client_socket) print(client_data) client_socket.close() self.socket.close() client.py from Lr1.client import Client class FirstTaskClient(Client): def start(self): self.send_data_to_server(\"Hello, server!\") server_data = self.get_data_from_server() print(server_data) self.socket.close()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"labs/lr1/#_3","text":"server = FirstTaskServer(\"UDP\") server.start() client = FirstTaskClient(\"UDP\") client.start()","title":"\u0417\u0430\u043f\u0443\u0441\u043a"},{"location":"labs/lr1/#task-2","text":"","title":"Task 2"},{"location":"labs/lr1/#_4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0440\u0430\u0441\u0447\u0435\u0442 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u0437\u0430\u0434\u0430\u0432\u0430\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0434\u0432\u0443\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043e\u043d \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d \u0432 \u0442\u0440\u0435\u0445\u043c\u0435\u0440\u043d\u043e\u0439 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"labs/lr1/#_5","text":"server.py from Lr1.server import Server import typing as tp class SecondTaskServer(Server): def start(self): client_socket, address = self.accept_connection() while not self.area: while len(self.vectors) < 2: if len(self.vectors) == 0: self.send_data_to_client(client_socket, \"First vector\") else: self.send_data_to_client(client_socket, \"Second vector\") data = self.get_data_from_client(client_socket) self._set_vector_from_data(data) self._set_area() client_socket.send(str(self.area).encode()) client_socket.close() self.socket.close() def _set_vector_from_data(self, data: str): coords = tuple(map(float, data.split())) self.vectors.append(coords) def _set_area(self): x = self.vectors[0][1] * self.vectors[1][2] - self.vectors[0][2] * self.vectors[1][1] y = self.vectors[0][0] * self.vectors[1][2] - self.vectors[0][2] * self.vectors[1][0] z = self.vectors[0][0] * self.vectors[1][1] - self.vectors[0][1] * self.vectors[1][0] self.area = (x**2 + y**2 + z**2)**0.5 def __init__(self, protocol_type: str): super().__init__(protocol_type) self.vectors: tp.List[tp.Tuple[float, ...]] = [] self.area = 0.0 client.py from Lr1.client import Client class SecondTaskClient(Client): def start(self): first_vector = input(\"Enter first vector's coordinates x, y, z: \") second_vector = input(\"Enter second vector's coordinates x, y, z: \") while True: data = self.get_data_from_server() if data == \"First vector\": self.send_data_to_server(first_vector) elif data == \"Second vector\": self.send_data_to_server(second_vector) else: print(data) break self.socket.close()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"labs/lr1/#_6","text":"server = SecondTaskServer(\"TCP\") server.start() client = SecondTaskClient(\"TCP\") client.start()","title":"\u0417\u0430\u043f\u0443\u0441\u043a"},{"location":"labs/lr1/#task-3","text":"","title":"Task 3"},{"location":"labs/lr1/#_7","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"labs/lr1/#_8","text":"server.py class ThirdTaskServer(Server): def start(self): client_socket, address = self.accept_connection() self._get_content() self._send_page_to_client(client_socket) client_socket.close() self.socket.close() def _get_content(self): with open(\"index.html\", \"r\") as file: self.content = file.read() def _send_page_to_client(self, client_socket): page_info = f'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n{self.content}' self.send_data_to_client(client_socket, page_info) def __init__(self, protocol_type: str): super().__init__(protocol_type) self.content = \"\"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"labs/lr1/#_9","text":"server = ThirdTaskServer(\"TCP\") server.start()","title":"\u0417\u0430\u043f\u0443\u0441\u043a"},{"location":"labs/lr1/#task-4","text":"","title":"Task 4"},{"location":"labs/lr1/#_10","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"labs/lr1/#_11","text":"server.py import socket import threading import typing as tp class User: def __init__(self, name: str, sock: socket.socket): self.name = name self.sock = sock class ChatServer: def __init__(self): self.alive = True self.sock = self.__create_tcp_socket() self.users: tp.List[User] = [] def __create_tcp_socket(self) -> socket.socket: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((socket.gethostname(), 1234)) sock.listen() return sock def __send_data_to_user(self, user_socket: socket.socket, data: str): try: user_socket.send(data.encode()) except: pass def __get_data_from_user(self, user_socket: socket.socket) -> str: data = \"\" try: data = user_socket.recv(1024).decode() finally: return data def __remove_user_from_chat(self, user: User): user.sock.close() self.users.remove(user) self.send_broadcast_message(None, f'{user.name} has left the chat') def switch_off(self): self.alive = False for user in self.users: self.__send_data_to_user(user.sock, \"!END\") user.sock.close() self.sock.close() def send_broadcast_message(self, author: tp.Optional[str], text: str): if author is None: data = f\"{text}\" else: data = f\"{author}: {text}\" for user in self.users: self.__send_data_to_user(user.sock, data) def handle_connection(self, user: User): try: while self.alive: message = self.__get_data_from_user(user.sock) if message != \"!QUIT\": self.send_broadcast_message(user.name, message) else: break finally: self.__remove_user_from_chat(user) def serve_forever(self): while self.alive: user_socket, _ = self.sock.accept() self.__send_data_to_user(user_socket, \"Enter Username\") username = self.__get_data_from_user(user_socket) user = User(username, user_socket) self.users.append(user) self.send_broadcast_message(None, f\"{username} has connected to the chat\") thread = threading.Thread(target=self.handle_connection, args=(user,)) thread.start() def start(self): try: self.serve_forever() except KeyboardInterrupt: self.switch_off() client.py import threading class ChatClient: def __init__(self): self.username = \"\" self.alive = True self.sock = self.__create_tcp_socket() def __create_tcp_socket(self) -> socket.socket: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((socket.gethostname(), 1234)) return sock def __send_data_to_server(self, data: str): if self.alive: self.sock.send(data.encode()) def __get_data_from_server(self) -> str: return self.sock.recv(1024).decode() def __left_from_server(self): self.alive = False self.sock.close() print(\"You have left the chat\") def receive(self): try: while self.alive: message = self.__get_data_from_server() if message == \"Enter Username\": self.__send_data_to_server(self.username) elif message == \"!END\": print(\"The server was interrupted\") break else: print(message) finally: self.__left_from_server() def send(self): while self.alive: message = input() self.__send_data_to_server(message) if message == \"!QUIT\": self.alive = False def start(self): self.username = input(\"Enter username: \") get_thread = threading.Thread(target=self.receive) get_thread.start() send_thread = threading.Thread(target=self.send) send_thread.start()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"labs/lr1/#_12","text":"# \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440 ChatServer().start() # \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f ChatClient().start()","title":"\u0417\u0430\u043f\u0443\u0441\u043a"},{"location":"labs/lr1/#task-5","text":"","title":"Task 5"},{"location":"labs/lr1/#_13","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u043c\u0435\u0442\u044c: - \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. - \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"labs/lr1/#_14","text":"request.py import typing as tp from urllib.parse import parse_qs, urlparse class Request: def __init__( self, method: str, target: str, version: str, headers: tp.Dict[str, tp.Any] ): self.method = method self.target = target self.version = version self.headers = headers @property def path(self): return self._url.path @property def query(self): return parse_qs(self._url.query) @property def _url(self): return urlparse(self.target) response.py import typing as tp class Response: def __init__( self, status: int, reason: str, headers: tp.Optional[tp.Dict[str, tp.Any]] = None, body: tp.Optional[bytes] = None ): self.status = status self.reason = reason self.headers = headers self.body = body server.py import email.message import socket import typing as tp import json from Lr1.task5.request import Request from Lr1.task5.response import Response from email.parser import Parser MAX_LINE = 64 * 1024 MAX_HEADERS = 100 class HTTPError(Exception): def __init__(self, status, reason, body=None): super() self.status = status self.reason = reason self.body = body class HTTPServer: def __init__(self, host: str, port: int): self.server: tp.Optional[socket.socket] = self.__create_tcp_socket(host, port) self._grades: tp.Dict[str, int] = {} def __create_tcp_socket(self, host: str, port: int) -> tp.Optional[socket.socket]: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: sock.bind((host, port)) sock.listen() return sock except socket.error: sock.close() return None def __map_message_to_dict(self, message: email.message.Message) -> tp.Dict[str, tp.Any]: res_dict = {} for key in message.keys(): res_dict[key] = message[key] return res_dict def __handle_post_grades(self, req: Request) -> Response: try: subject = req.query['subject'][0] grade = req.query['grade'][0] self._grades[subject] = int(grade) except Exception: raise HTTPError(400, \"Bad Request\") return Response(204, 'Created') def __handle_get_grades(self, req: Request) -> Response: accept = req.headers.get('Accept') if accept is None: raise HTTPError(400, \"Bad Request\") if 'application/json' in accept: content_type = 'application/json; charset=utf-8' body = json.dumps(self._grades) else: return Response(406, 'Not Acceptable') headers = {'Content-Type': content_type, 'Content-Length': len(body)} return Response(200, 'OK', headers, body.encode('utf-8')) def serve_forever(self): if self.server is None: return try: while True: conn, _ = self.server.accept() try: self.serve_client(conn) except Exception as e: print('Client serving failed', e) except KeyboardInterrupt: self.server.close() def serve_client(self, conn: socket.socket): try: req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) except ConnectionResetError: conn = None except HTTPError as e: self.send_error(conn, e) if conn: conn.close() def parse_request(self, conn) -> Request: rfile = conn.makefile('rb') method, target, ver = self.parse_request_line(rfile) headers = self.parse_headers(rfile) return Request(method, target, ver, headers) def parse_headers(self, rfile) -> tp.Dict[str, tp.Any]: headers = [] while True: line = rfile.readline(MAX_LINE + 1) if len(line) > MAX_LINE: raise HTTPError(494, 'Request header too large') if line in (b'\\r\\n', b'\\n', b''): break headers.append(line) if len(headers) > MAX_HEADERS: raise HTTPError(494, 'Too many headers') sheaders = b''.join(headers).decode('iso-8859-1') message = Parser().parsestr(sheaders) return self.__map_message_to_dict(message) def parse_request_line(self, rfile) -> tp.Tuple[str, ...]: raw = rfile.readline(MAX_LINE + 1) if len(raw) > MAX_LINE: raise HTTPError(400, 'Bad request', 'Request line is too long') req_line = str(raw, 'iso-8859-1') req_line = req_line.rstrip('\\r\\n') words = req_line.split() if len(words) != 3: raise HTTPError(400, 'Bad request', 'Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise HTTPError(505, 'HTTP Version Not Supported') return method, target, ver def handle_request(self, req: Request) -> Response: if req.path == '/api' and req.method == 'POST': return self.__handle_post_grades(req) if req.path == '/api' and req.method == 'GET': return self.__handle_get_grades(req) raise HTTPError(404, 'Not found') def send_response(self, conn: socket.socket, resp: Response): wfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' wfile.write(status_line.encode('iso-8859-1')) if resp.headers: for (key, value) in resp.headers.items(): header_line = f'{key}: {value}\\r\\n' wfile.write(header_line.encode('iso-8859-1')) wfile.write(b'\\r\\n') if resp.body: wfile.write(resp.body) wfile.flush() wfile.close() def send_error(self, conn: socket.socket, err: HTTPError): try: status = err.status reason = err.reason body = (err.body or err.reason).encode('utf-8') except Exception: status = 500 reason = b'Internal Server Error' body = b'Internal Server Error' resp = Response( status, reason, {'Content-Length': len(body)}, body ) self.send_response(conn, resp)","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"labs/lr1/#_15","text":"host = \"127.0.0.1\" port = 1234 serv = HTTPServer(host, port) serv.serve_forever()","title":"\u0417\u0430\u043f\u0443\u0441\u043a"},{"location":"labs/lr2/","text":"\u0412\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u0435\u0439 \u041c\u043e\u0434\u0435\u043b\u044c models.py from django.db import models from django.contrib.auth import get_user_model from django.core.exceptions import ValidationError User = get_user_model() class Owner(models.Model): organization_name = models.CharField(max_length=50) contact_phone = models.CharField(max_length=20) def __str__(self): return self.organization_name class Hotel(models.Model): name = models.CharField(max_length=50) address = models.CharField(max_length=100) description = models.TextField() owner = models.ForeignKey(Owner, on_delete=models.SET_NULL, null=True) def __str__(self): return self.name class RoomType(models.Model): type = models.CharField(max_length=30) def __str__(self): return self.type class Facilities(models.Model): pets_allowed = models.BooleanField(verbose_name=\"\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u044b \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0435\") parking = models.BooleanField(verbose_name=\"\u0415\u0441\u0442\u044c \u043f\u0430\u0440\u043a\u043e\u0432\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u0435\u043b\u0435\") restaurant = models.BooleanField(verbose_name=\"\u0415\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u043f\u0440\u0438 \u043e\u0442\u0435\u043b\u0435\") free_wifi = models.BooleanField(verbose_name=\"\u0412 \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0439 WiFi\") spa = models.BooleanField(verbose_name=\"\u0415\u0441\u0442\u044c \u0441\u043f\u0430-\u0446\u0435\u043d\u0442\u0440 \u043f\u0440\u0438 \u043e\u0442\u0435\u043b\u0435\") fitness_centre = models.BooleanField(verbose_name=\"\u0415\u0441\u0442\u044c \u0444\u0438\u0442\u043d\u0435\u0441\u0441-\u0446\u0435\u043d\u0442\u0440 \u043f\u0440\u0438 \u043e\u0442\u0435\u043b\u0435\") facilities_for_disabled = models.BooleanField(verbose_name=\"\u041d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043b\u044e\u0434\u0435\u0439 \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438\") def get_fields(self): fields = [] for field in Facilities._meta.fields: if field.name != \"id\": fields.append((field.verbose_name, getattr(self, field.name))) return fields class Room(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) name = models.CharField(max_length=50) type = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True) capacity = models.IntegerField() price = models.FloatField() facilities = models.ForeignKey(Facilities, on_delete=models.SET_NULL, null=True) def __str__(self): return self.hotel.name + \" \" + self.name class Reservation(models.Model): date_start = models.DateTimeField() date_end = models.DateTimeField() user = models.ForeignKey(User, on_delete=models.CASCADE) room = models.ForeignKey(Room, on_delete=models.CASCADE) created = models.DateTimeField(auto_now=True) def __str__(self): return self.user.username + \" \" + self.room.name def validate_range(value): if value < 0 or value > 10: raise ValidationError(f\"{value} is outside the range 0...10\") class Comment(models.Model): user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True) room = models.ForeignKey(Room, on_delete=models.CASCADE) reservation = models.ForeignKey(Reservation, on_delete=models.SET_NULL, null=True, blank=True) body = models.TextField() rating = models.IntegerField(validators=[validate_range], null=True, blank=True) created = models.DateTimeField(auto_now=True) \u0424\u043e\u0440\u043c\u044b \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 forms.py class RegisterUserForm(UserCreationForm): username = forms.CharField(label='\u041b\u043e\u0433\u0438\u043d', widget=forms.TextInput(attrs={'class': 'from-input'})) password1 = forms.CharField(label='\u041f\u0430\u0440\u043e\u043b\u044c', widget=forms.PasswordInput(attrs={'class': 'from-input'})) password2 = forms.CharField(label='\u041f\u043e\u0432\u0442\u043e\u0440 \u043f\u0430\u0440\u043e\u043b\u044f', widget=forms.PasswordInput(attrs={'class': 'from-input'})) class Meta: model = User fields = ('username', 'password1', 'password2') \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f forms.py class ReserveForm(forms.ModelForm): date_start = forms.DateTimeField(label='\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430', widget=forms.DateInput(attrs={'type': 'date'})) date_end = forms.DateTimeField(label='\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430', widget=forms.DateInput(attrs={'type': 'date'})) class Meta: model = Reservation fields = ('date_start', 'date_end') \u0412\u0432\u043e\u0434\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f forms.py class InputCommentForm(forms.ModelForm): reservation = forms.ModelChoiceField(label='\u041f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f', empty_label='\u041d\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043e', queryset=None, required=False) rating = forms.IntegerField(label='\u041e\u0446\u0435\u043d\u043a\u0430', min_value=0, max_value=10) body = forms.TextInput(attrs={'size': 10, 'title': None}) def __init__(self, user: tp.Optional[User], room: tp.Optional[Room], *args, **kwargs): super().__init__(*args, **kwargs) if user and room: self.fields['reservation'].queryset = Reservation.objects.filter(user=user).filter(room=room) class Meta: model = Comment fields = ('reservation', 'rating', 'body') View's views.py \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 from django.urls import reverse_lazy from .forms import RegisterUserForm class RegisterUser(CreateView): form_class = RegisterUserForm template_name = \"register.html\" success_url = reverse_lazy(\"login\") def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = \"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\" return context \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 from django.contrib.auth.forms import AuthenticationForm class LoginUser(LoginView): form_class = AuthenticationForm template_name = \"login.html\" def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = \"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f\" return context def get_success_url(self): next_page = self.request.GET.get(\"next\", default=\"/\") return next_page \u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u043f\u0440\u043e\u0444\u0438\u043b\u044f from django.contrib.auth import logout def logout_user(request): logout(request) return redirect('hotels') \u041f\u0440\u043e\u0444\u0438\u043b\u044c from .models import Reservation def profile(request): reservations = Reservation.objects.filter(user=request.user) return render(request, \"profile.html\", {\"title\": \"\u041f\u0440\u043e\u0444\u0438\u043b\u044c\", \"reservations\": reservations}) \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439 from .models import Hotel class HotelList(ListView): model = Hotel template_name = \"hotel_list.html\" def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = \"Hotels\" return context \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0442\u0435\u043b\u0435 from .models import Hotel, Room class HotelInfo(DetailView): model = Hotel template_name = \"hotel_info.html\" context_object_name = \"hotel\" def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = context['hotel'].name context['rooms'] = Room.objects.filter(hotel=context['hotel']) return context \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435 from django.shortcuts import get_object_or_404, render from .models import Comment, Room from .forms import InputCommentForm def room_info(request, pk): room = get_object_or_404(Room, id=pk) comments = Comment.objects.filter(room=room) if request.method == \"POST\": form = InputCommentForm(request.user, room, request.POST) if form.is_valid(): form = form.save(commit=False) form.user = request.user form.room = room form.save() return redirect(\"room_info\", pk=pk) else: if request.user.is_authenticated: form = InputCommentForm(request.user, room) else: form = InputCommentForm(None, None) return render(request, \"room_info.html\", {\"title\": room.name, \"room\": room, \"comments\": comments, \"form\": form}) \u041a\u043b\u0430\u0441\u0441, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0449\u0438\u0439 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435) from django.shortcuts import render, redirect, get_object_or_404 from django.contrib import messages from .models import Reservation from .forms import ReserveForm from datetime import datetime class ReservationView: @staticmethod def _is_dates_valid(date_start, date_end) -> bool: return (date_start < date_end) and (date_start > datetime.now(tz=pytz.UTC)) @staticmethod def _is_dates_free(date_start, date_end, room_id, user_id) -> bool: reservations = Reservation.objects.filter(room=room_id).exclude(user=user_id) for old_reservation in reservations: if (old_reservation.date_start < date_start < old_reservation.date_end) or \\ (old_reservation.date_start < date_end < old_reservation.date_end): return False return True @staticmethod def _check_dates(request, room_id, user_id) -> tp.Tuple[bool, str]: date_start = datetime.strptime(request.POST['date_start'], '%Y-%m-%d').replace(tzinfo=pytz.UTC) date_end = datetime.strptime(request.POST['date_end'], '%Y-%m-%d').replace(tzinfo=pytz.UTC) if not ReservationView._is_dates_valid(date_start, date_end): return False, '\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u043e\u0437\u0436\u0435 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0435\u0439 \u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0434\u0430\u0442\u044b \u0432\u044b\u0435\u0437\u0434\u0430. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043d\u043e\u0432\u043e' if not ReservationView._is_dates_free(date_start, date_end, room_id, user_id): return False, '\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u044b \u0437\u0430\u043d\u044f\u0442\u044b. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0434\u0440\u0443\u0433\u0438\u0435' return True, '' @staticmethod def reserve_room(request, pk): room = get_object_or_404(Room, id=pk) form = ReserveForm(request.POST or None) if form.is_valid(): dates_check = ReservationView._check_dates(request, pk, request.user.id) if not dates_check[0]: messages.error(request, dates_check[1]) return redirect('reserve', pk=pk) form = form.save(commit=False) form.user = request.user form.room = room form.save() return redirect('profile') return render(request, \"reserve.html\", {\"title\": room.name, \"form\": form}) @staticmethod def update_reservation(request, pk): reservation = get_object_or_404(Reservation, id=pk) form = ReserveForm(request.POST or None, instance=reservation) if not reservation.user == request.user: return redirect(f'profile') if form.is_valid(): dates_check = ReservationView._check_dates(request, reservation.room.id, request.user.id) if not dates_check[0]: messages.error(request, dates_check[1]) return redirect('update_reservation', pk=pk) form.save() return redirect('profile') return render(request, \"update_reservation.html\", {\"title\": \"\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\", \"form\": form}) @staticmethod def delete_reservation(request, pk): reservation = Reservation.objects.get(id=pk) if request.user.id != reservation.user.id: return redirect('profile') if request.method == 'POST': reservation.delete() return redirect('profile') return render(request, 'delete_reservation.html', {'title': '\u041e\u0442\u043c\u0435\u043d\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', 'reservation': reservation}) \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 from django.shortcuts import render from .models import Reservation def guests_info(request): reservations = Reservation.objects.filter(date_start__month__lte=datetime.now().month, date_end__month__gte=datetime.now().month) hotels_guests: tp.Dict[Hotel, tp.Set[str]] = {} for reservation in reservations: if reservation.room.hotel in hotels_guests: hotels_guests[reservation.room.hotel].add(reservation.user.username) else: hotels_guests[reservation.room.hotel] = {reservation.user.username} return render(request, \"guests.html\", {\"title\": \"\u041f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u044b\", \"hotels_guests\": hotels_guests, \"month\": datetime.now().strftime(\"%B\")}) \u0412\u0441\u0435 URL \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b hotels_app/urls.py urlpatterns = [ path(\"\", views.HotelList.as_view(), name=\"hotels\"), path(\"hotel/<int:pk>\", views.HotelInfo.as_view(), name=\"hotel_info\"), path(\"room/<int:pk>\", views.room_info, name=\"room_info\"), path(\"room/<int:pk>/reserve\", login_required(views.ReservationView.reserve_room, login_url=\"login\"), name=\"reserve\"), path(\"reservation/<int:pk>/update\", login_required(views.ReservationView.update_reservation, login_url=\"login\"), name=\"update_reservation\"), path(\"reservation/<int:pk>/delete\", login_required(views.ReservationView.delete_reservation, login_url=\"login\"), name=\"delete_reservation\"), path(\"register/\", views.RegisterUser.as_view(), name=\"register\"), path(\"login/\", views.LoginUser.as_view(), name=\"login\"), path(\"logout/\", views.logout_user, name=\"logout\"), path(\"profile/\", login_required(views.profile, login_url=\"login\"), name=\"profile\"), path(\"guests/\", views.guests_info, name=\"guests\") ]","title":"Lab \u21162"},{"location":"labs/lr2/#-","text":"","title":"\u0412\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u0435\u0439"},{"location":"labs/lr2/#_1","text":"models.py from django.db import models from django.contrib.auth import get_user_model from django.core.exceptions import ValidationError User = get_user_model() class Owner(models.Model): organization_name = models.CharField(max_length=50) contact_phone = models.CharField(max_length=20) def __str__(self): return self.organization_name class Hotel(models.Model): name = models.CharField(max_length=50) address = models.CharField(max_length=100) description = models.TextField() owner = models.ForeignKey(Owner, on_delete=models.SET_NULL, null=True) def __str__(self): return self.name class RoomType(models.Model): type = models.CharField(max_length=30) def __str__(self): return self.type class Facilities(models.Model): pets_allowed = models.BooleanField(verbose_name=\"\u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u044b \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0435\") parking = models.BooleanField(verbose_name=\"\u0415\u0441\u0442\u044c \u043f\u0430\u0440\u043a\u043e\u0432\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u0435\u043b\u0435\") restaurant = models.BooleanField(verbose_name=\"\u0415\u0441\u0442\u044c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u043f\u0440\u0438 \u043e\u0442\u0435\u043b\u0435\") free_wifi = models.BooleanField(verbose_name=\"\u0412 \u043d\u043e\u043c\u0435\u0440\u0435 \u0435\u0441\u0442\u044c \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0439 WiFi\") spa = models.BooleanField(verbose_name=\"\u0415\u0441\u0442\u044c \u0441\u043f\u0430-\u0446\u0435\u043d\u0442\u0440 \u043f\u0440\u0438 \u043e\u0442\u0435\u043b\u0435\") fitness_centre = models.BooleanField(verbose_name=\"\u0415\u0441\u0442\u044c \u0444\u0438\u0442\u043d\u0435\u0441\u0441-\u0446\u0435\u043d\u0442\u0440 \u043f\u0440\u0438 \u043e\u0442\u0435\u043b\u0435\") facilities_for_disabled = models.BooleanField(verbose_name=\"\u041d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043b\u044e\u0434\u0435\u0439 \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044f\u043c\u0438\") def get_fields(self): fields = [] for field in Facilities._meta.fields: if field.name != \"id\": fields.append((field.verbose_name, getattr(self, field.name))) return fields class Room(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) name = models.CharField(max_length=50) type = models.ForeignKey(RoomType, on_delete=models.SET_NULL, null=True) capacity = models.IntegerField() price = models.FloatField() facilities = models.ForeignKey(Facilities, on_delete=models.SET_NULL, null=True) def __str__(self): return self.hotel.name + \" \" + self.name class Reservation(models.Model): date_start = models.DateTimeField() date_end = models.DateTimeField() user = models.ForeignKey(User, on_delete=models.CASCADE) room = models.ForeignKey(Room, on_delete=models.CASCADE) created = models.DateTimeField(auto_now=True) def __str__(self): return self.user.username + \" \" + self.room.name def validate_range(value): if value < 0 or value > 10: raise ValidationError(f\"{value} is outside the range 0...10\") class Comment(models.Model): user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True) room = models.ForeignKey(Room, on_delete=models.CASCADE) reservation = models.ForeignKey(Reservation, on_delete=models.SET_NULL, null=True, blank=True) body = models.TextField() rating = models.IntegerField(validators=[validate_range], null=True, blank=True) created = models.DateTimeField(auto_now=True)","title":"\u041c\u043e\u0434\u0435\u043b\u044c"},{"location":"labs/lr2/#_2","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"labs/lr2/#_3","text":"forms.py class RegisterUserForm(UserCreationForm): username = forms.CharField(label='\u041b\u043e\u0433\u0438\u043d', widget=forms.TextInput(attrs={'class': 'from-input'})) password1 = forms.CharField(label='\u041f\u0430\u0440\u043e\u043b\u044c', widget=forms.PasswordInput(attrs={'class': 'from-input'})) password2 = forms.CharField(label='\u041f\u043e\u0432\u0442\u043e\u0440 \u043f\u0430\u0440\u043e\u043b\u044f', widget=forms.PasswordInput(attrs={'class': 'from-input'})) class Meta: model = User fields = ('username', 'password1', 'password2')","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438"},{"location":"labs/lr2/#_4","text":"forms.py class ReserveForm(forms.ModelForm): date_start = forms.DateTimeField(label='\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430', widget=forms.DateInput(attrs={'type': 'date'})) date_end = forms.DateTimeField(label='\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430', widget=forms.DateInput(attrs={'type': 'date'})) class Meta: model = Reservation fields = ('date_start', 'date_end')","title":"\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"},{"location":"labs/lr2/#_5","text":"forms.py class InputCommentForm(forms.ModelForm): reservation = forms.ModelChoiceField(label='\u041f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f', empty_label='\u041d\u0435 \u0432\u044b\u0431\u0440\u0430\u043d\u043e', queryset=None, required=False) rating = forms.IntegerField(label='\u041e\u0446\u0435\u043d\u043a\u0430', min_value=0, max_value=10) body = forms.TextInput(attrs={'size': 10, 'title': None}) def __init__(self, user: tp.Optional[User], room: tp.Optional[Room], *args, **kwargs): super().__init__(*args, **kwargs) if user and room: self.fields['reservation'].queryset = Reservation.objects.filter(user=user).filter(room=room) class Meta: model = Comment fields = ('reservation', 'rating', 'body')","title":"\u0412\u0432\u043e\u0434\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f"},{"location":"labs/lr2/#views","text":"views.py","title":"View's"},{"location":"labs/lr2/#_6","text":"from django.urls import reverse_lazy from .forms import RegisterUserForm class RegisterUser(CreateView): form_class = RegisterUserForm template_name = \"register.html\" success_url = reverse_lazy(\"login\") def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = \"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\" return context","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438"},{"location":"labs/lr2/#_7","text":"from django.contrib.auth.forms import AuthenticationForm class LoginUser(LoginView): form_class = AuthenticationForm template_name = \"login.html\" def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = \"\u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f\" return context def get_success_url(self): next_page = self.request.GET.get(\"next\", default=\"/\") return next_page","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"labs/lr2/#_8","text":"from django.contrib.auth import logout def logout_user(request): logout(request) return redirect('hotels')","title":"\u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u043f\u0440\u043e\u0444\u0438\u043b\u044f"},{"location":"labs/lr2/#_9","text":"from .models import Reservation def profile(request): reservations = Reservation.objects.filter(user=request.user) return render(request, \"profile.html\", {\"title\": \"\u041f\u0440\u043e\u0444\u0438\u043b\u044c\", \"reservations\": reservations})","title":"\u041f\u0440\u043e\u0444\u0438\u043b\u044c"},{"location":"labs/lr2/#_10","text":"from .models import Hotel class HotelList(ListView): model = Hotel template_name = \"hotel_list.html\" def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = \"Hotels\" return context","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439"},{"location":"labs/lr2/#_11","text":"from .models import Hotel, Room class HotelInfo(DetailView): model = Hotel template_name = \"hotel_info.html\" context_object_name = \"hotel\" def get_context_data(self, **kwargs): context = super().get_context_data(**kwargs) context['title'] = context['hotel'].name context['rooms'] = Room.objects.filter(hotel=context['hotel']) return context","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u043e\u0442\u0435\u043b\u0435"},{"location":"labs/lr2/#_12","text":"from django.shortcuts import get_object_or_404, render from .models import Comment, Room from .forms import InputCommentForm def room_info(request, pk): room = get_object_or_404(Room, id=pk) comments = Comment.objects.filter(room=room) if request.method == \"POST\": form = InputCommentForm(request.user, room, request.POST) if form.is_valid(): form = form.save(commit=False) form.user = request.user form.room = room form.save() return redirect(\"room_info\", pk=pk) else: if request.user.is_authenticated: form = InputCommentForm(request.user, room) else: form = InputCommentForm(None, None) return render(request, \"room_info.html\", {\"title\": room.name, \"room\": room, \"comments\": comments, \"form\": form})","title":"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u043e\u043c\u0435\u0440\u0435"},{"location":"labs/lr2/#_13","text":"from django.shortcuts import render, redirect, get_object_or_404 from django.contrib import messages from .models import Reservation from .forms import ReserveForm from datetime import datetime class ReservationView: @staticmethod def _is_dates_valid(date_start, date_end) -> bool: return (date_start < date_end) and (date_start > datetime.now(tz=pytz.UTC)) @staticmethod def _is_dates_free(date_start, date_end, room_id, user_id) -> bool: reservations = Reservation.objects.filter(room=room_id).exclude(user=user_id) for old_reservation in reservations: if (old_reservation.date_start < date_start < old_reservation.date_end) or \\ (old_reservation.date_start < date_end < old_reservation.date_end): return False return True @staticmethod def _check_dates(request, room_id, user_id) -> tp.Tuple[bool, str]: date_start = datetime.strptime(request.POST['date_start'], '%Y-%m-%d').replace(tzinfo=pytz.UTC) date_end = datetime.strptime(request.POST['date_end'], '%Y-%m-%d').replace(tzinfo=pytz.UTC) if not ReservationView._is_dates_valid(date_start, date_end): return False, '\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u043e\u0437\u0436\u0435 \u0441\u0435\u0433\u043e\u0434\u043d\u044f\u0448\u043d\u0435\u0439 \u0438 \u0440\u0430\u043d\u044c\u0448\u0435 \u0434\u0430\u0442\u044b \u0432\u044b\u0435\u0437\u0434\u0430. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043d\u043e\u0432\u043e' if not ReservationView._is_dates_free(date_start, date_end, room_id, user_id): return False, '\u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u0442\u044b \u0437\u0430\u043d\u044f\u0442\u044b. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0434\u0440\u0443\u0433\u0438\u0435' return True, '' @staticmethod def reserve_room(request, pk): room = get_object_or_404(Room, id=pk) form = ReserveForm(request.POST or None) if form.is_valid(): dates_check = ReservationView._check_dates(request, pk, request.user.id) if not dates_check[0]: messages.error(request, dates_check[1]) return redirect('reserve', pk=pk) form = form.save(commit=False) form.user = request.user form.room = room form.save() return redirect('profile') return render(request, \"reserve.html\", {\"title\": room.name, \"form\": form}) @staticmethod def update_reservation(request, pk): reservation = get_object_or_404(Reservation, id=pk) form = ReserveForm(request.POST or None, instance=reservation) if not reservation.user == request.user: return redirect(f'profile') if form.is_valid(): dates_check = ReservationView._check_dates(request, reservation.room.id, request.user.id) if not dates_check[0]: messages.error(request, dates_check[1]) return redirect('update_reservation', pk=pk) form.save() return redirect('profile') return render(request, \"update_reservation.html\", {\"title\": \"\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\", \"form\": form}) @staticmethod def delete_reservation(request, pk): reservation = Reservation.objects.get(id=pk) if request.user.id != reservation.user.id: return redirect('profile') if request.method == 'POST': reservation.delete() return redirect('profile') return render(request, 'delete_reservation.html', {'title': '\u041e\u0442\u043c\u0435\u043d\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f', 'reservation': reservation})","title":"\u041a\u043b\u0430\u0441\u0441, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0449\u0438\u0439 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435)"},{"location":"labs/lr2/#_14","text":"from django.shortcuts import render from .models import Reservation def guests_info(request): reservations = Reservation.objects.filter(date_start__month__lte=datetime.now().month, date_end__month__gte=datetime.now().month) hotels_guests: tp.Dict[Hotel, tp.Set[str]] = {} for reservation in reservations: if reservation.room.hotel in hotels_guests: hotels_guests[reservation.room.hotel].add(reservation.user.username) else: hotels_guests[reservation.room.hotel] = {reservation.user.username} return render(request, \"guests.html\", {\"title\": \"\u041f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u044b\", \"hotels_guests\": hotels_guests, \"month\": datetime.now().strftime(\"%B\")})","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432"},{"location":"labs/lr2/#url","text":"hotels_app/urls.py urlpatterns = [ path(\"\", views.HotelList.as_view(), name=\"hotels\"), path(\"hotel/<int:pk>\", views.HotelInfo.as_view(), name=\"hotel_info\"), path(\"room/<int:pk>\", views.room_info, name=\"room_info\"), path(\"room/<int:pk>/reserve\", login_required(views.ReservationView.reserve_room, login_url=\"login\"), name=\"reserve\"), path(\"reservation/<int:pk>/update\", login_required(views.ReservationView.update_reservation, login_url=\"login\"), name=\"update_reservation\"), path(\"reservation/<int:pk>/delete\", login_required(views.ReservationView.delete_reservation, login_url=\"login\"), name=\"delete_reservation\"), path(\"register/\", views.RegisterUser.as_view(), name=\"register\"), path(\"login/\", views.LoginUser.as_view(), name=\"login\"), path(\"logout/\", views.logout_user, name=\"logout\"), path(\"profile/\", login_required(views.profile, login_url=\"login\"), name=\"profile\"), path(\"guests/\", views.guests_info, name=\"guests\") ]","title":"\u0412\u0441\u0435 URL \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"labs/lr3/","text":"API \u0434\u043b\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0431\u0438\u0440\u0436\u0438 \u041c\u043e\u0434\u0435\u043b\u044c models.py User = get_user_model() class Currency(models.Model): users = models.ManyToManyField(User, verbose_name=\"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b\", through=\"Ownership\") name = models.CharField(verbose_name=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\", max_length=30, unique=True) abbreviation = models.CharField(verbose_name=\"\u0421\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435\", max_length=5, unique=True) price = models.DecimalField(verbose_name=\"\u0426\u0435\u043d\u0430 \u0437\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443\", max_digits=19, decimal_places=10) count = models.IntegerField(verbose_name=\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438\") daily_changes = models.FloatField(verbose_name=\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0437\u0430 \u0434\u0435\u043d\u044c (%)\") weekly_changes = models.FloatField(verbose_name=\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0437\u0430 \u043d\u0435\u0434\u0435\u043b\u044e (%)\") date_added = models.DateTimeField(verbose_name=\"\u0414\u0430\u0442\u0430 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f\", auto_now=True) coinlib_id = models.PositiveIntegerField(verbose_name=\"Id \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 Coinlib.io\") image = models.CharField(verbose_name=\"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\", max_length=1000) def __str__(self): return f\"{self.name} ({self.abbreviation})\" class Ownership(models.Model): user = models.ForeignKey(User, verbose_name=\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\", on_delete=models.CASCADE) currency = models.ForeignKey(Currency, verbose_name=\"\u0412\u0430\u043b\u044e\u0442\u0430\", on_delete=models.CASCADE) count = models.IntegerField(verbose_name=\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u043b\u044e\u0442\u044b \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", default=0) class Meta: unique_together = ('user', 'currency') def __str__(self): return f\"{self.user.username} - {self.currency.name}\" class Tag(models.Model): title = models.CharField(verbose_name=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\", max_length=15, unique=True) def __str__(self): return self.title class Discussion(models.Model): user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True) tags = models.ManyToManyField(Tag, verbose_name=\"\u0422\u044d\u0433\u0438\") title = models.CharField(verbose_name=\"\u0422\u0435\u043c\u0430 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f\", max_length=80) description = models.TextField(verbose_name=\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\") date_added = models.DateTimeField(verbose_name=\"\u0414\u0430\u0442\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438\", auto_now=True) def __str__(self): return f\"{self.user.username} - {self.date_added}: {self.title}\" class Comment(models.Model): user = models.ForeignKey(User, verbose_name=\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\", on_delete=models.SET_NULL, null=True) discussion = models.ForeignKey(Discussion, verbose_name=\"\u041e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435\", on_delete=models.CASCADE) body = models.TextField(verbose_name=\"\u0422\u0435\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\") date_added = models.DateTimeField(verbose_name=\"\u0414\u0430\u0442\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438\", auto_now=True) def __str__(self): return f\"{self.user.username} ({self.date_added})\" class Transaction(models.Model): TR_TYPE = ( ('b', 'buy'), ('s', 'sell') ) user = models.ForeignKey(User, on_delete=models.RESTRICT) currency = models.ForeignKey(Currency, on_delete=models.RESTRICT) transaction_type = models.CharField(max_length=1, choices=TR_TYPE) count = models.IntegerField() transaction_amount = models.DecimalField(max_digits=40, decimal_places=20) transaction_time = models.DateTimeField(auto_now=True) Views views.py class CurrenciesListApiView(generics.ListAPIView): \"\"\" Displaying all currencies \"\"\" serializer_class = serializers.CurrencySerializer queryset = Currency.objects.all() filter_backends = [filters.SearchFilter, filters.OrderingFilter] search_fields = [\"name\", \"abbreviation\"] ordering_fields = ['price', 'date_added'] class PopularCurrenciesListApiView(generics.ListAPIView): \"\"\" Displaying first three currencies \"\"\" serializer_class = serializers.CurrencySerializer queryset = Currency.objects.filter(id__lte=3) class CurrencyInfoApiView(generics.RetrieveAPIView): \"\"\" Displaying information about the currency by id \"\"\" serializer_class = serializers.CurrencySerializer queryset = Currency.objects.all() class CurrencyCreateApiView(generics.CreateAPIView): \"\"\" Creates currency \"\"\" serializer_class = serializers.CurrencySerializer permission_classes = (permissions.IsAdminUser,) class AllOwnershipListApiView(generics.ListAPIView): \"\"\" Displaying all ownerships for admins \"\"\" serializer_class = serializers.OwnershipSerializer queryset = Ownership.objects.all() permission_classes = (permissions.IsAdminUser,) class UserOwnershipsListApiView(generics.ListAPIView): \"\"\" Displaying user ownerships \"\"\" serializer_class = serializers.OwnershipSerializer permission_classes = (permissions.IsAuthenticated,) def get_queryset(self): user = self.request.user if not user.is_authenticated: raise PermissionDenied() return Ownership.objects.filter(user=user) class OwnershipCreateApiView(APIView): \"\"\" Creates ownership \"\"\" permission_classes = (permissions.IsAuthenticated,) def post(self, request): user = request.user if not user.is_authenticated: raise PermissionDenied() request_data = request.data.copy() request_data[\"user\"] = user.id serializer = serializers.OwnershipSerializer(data=request_data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class OwnershipUpdateApiView(generics.UpdateAPIView): \"\"\" Updates ownership \"\"\" queryset = Ownership.objects.all() serializer_class = serializers.OwnershipUpdateSerializer permission_classes = (permissions.IsAuthenticated,) class TransactionCreateApiView(APIView): \"\"\" Creates transaction \"\"\" permission_classes = (permissions.IsAuthenticated,) def post(self, request): user = request.user if not user.is_authenticated: raise PermissionDenied() request_data = request.data.copy() request_data[\"user\"] = user.id serializer = serializers.TransactionSerializer(data=request_data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class AllTransactionListApiView(generics.ListAPIView): \"\"\" Displaying all transaction for admins \"\"\" serializer_class = serializers.TransactionSerializer queryset = Transaction.objects.all() permission_classes = (permissions.IsAdminUser,) class UserTransactionsListApiView(generics.ListAPIView): \"\"\" Displaying user transactions \"\"\" serializer_class = serializers.TransactionSerializer permission_classes = (permissions.IsAuthenticated,) def get_queryset(self): user = self.request.user if not user.is_authenticated: raise PermissionDenied() return Transaction.objects.filter(user=user) class DiscussionCreateApiView(APIView): \"\"\" Creates discussion \"\"\" permission_classes = (permissions.IsAuthenticated,) def post(self, request): user = request.user if not user.is_authenticated: raise PermissionDenied() request_data = request.data.copy() request_data[\"user\"] = user.id serializer = serializers.DiscussionSerializer(data=request_data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class DiscussionsListApiView(generics.ListAPIView): \"\"\" Show all discussions \"\"\" serializer_class = serializers.DiscussionSerializer queryset = Discussion.objects.all() class TagCreateApiView(generics.CreateAPIView): \"\"\" Creates tag \"\"\" serializer_class = serializers.TagSerializer permission_classes = (permissions.IsAdminUser,) class TagsListApiView(generics.ListAPIView): \"\"\" Show all tags \"\"\" serializer_class = serializers.TagSerializer queryset = Tag.objects.all() class CommentCreateApiView(APIView): \"\"\" Creates comment \"\"\" permission_classes = (permissions.IsAuthenticated,) def post(self, request): user = request.user if not user.is_authenticated: raise PermissionDenied() request_data = request.data.copy() request_data[\"user\"] = user.id serializer = serializers.CommentSerializer(data=request_data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class CommentsListApiView(APIView): \"\"\" Show comments for special discussion \"\"\" def get_objects(self, discussion_id): return Comment.objects.filter(discussion=discussion_id) def get(self, request, pk): comments = self.get_objects(pk) serializer = serializers.CommentSerializer(comments, many=True) return Response(serializer.data, status=status.HTTP_200_OK) URL \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b crypto_wallet_app/urls.py urlpatterns = [ path('doc/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('doc/redoc', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), path('currencies/', views.CurrenciesListApiView.as_view()), path('currencies/popular/', views.PopularCurrenciesListApiView.as_view()), path('currencies/<int:pk>/', views.CurrencyInfoApiView.as_view()), path('currencies/create/', views.CurrencyCreateApiView.as_view()), path('ownerships/all/', views.AllOwnershipListApiView.as_view()), path('ownerships/', views.UserOwnershipsListApiView.as_view()), path('ownerships/create/', views.OwnershipCreateApiView.as_view()), path('ownerships/change_count/<int:pk>/', views.OwnershipUpdateApiView.as_view()), path('transactions/all/', views.AllTransactionListApiView.as_view()), path('transactions/', views.UserTransactionsListApiView.as_view()), path('transactions/create/', views.TransactionCreateApiView.as_view()), path('discussions/', views.DiscussionsListApiView.as_view()), path('discussions/create/', views.DiscussionCreateApiView.as_view()), path('tags/', views.TagsListApiView.as_view()), path('tags/create/', views.TagCreateApiView.as_view()), path('comments/create/', views.CommentCreateApiView.as_view()), path('comments/<int:pk>', views.CommentsListApiView.as_view()), ] API","title":"Lab \u21163"},{"location":"labs/lr3/#api","text":"","title":"API \u0434\u043b\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0431\u0438\u0440\u0436\u0438"},{"location":"labs/lr3/#_1","text":"models.py User = get_user_model() class Currency(models.Model): users = models.ManyToManyField(User, verbose_name=\"\u0412\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b\", through=\"Ownership\") name = models.CharField(verbose_name=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\", max_length=30, unique=True) abbreviation = models.CharField(verbose_name=\"\u0421\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435\", max_length=5, unique=True) price = models.DecimalField(verbose_name=\"\u0426\u0435\u043d\u0430 \u0437\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443\", max_digits=19, decimal_places=10) count = models.IntegerField(verbose_name=\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438\") daily_changes = models.FloatField(verbose_name=\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0437\u0430 \u0434\u0435\u043d\u044c (%)\") weekly_changes = models.FloatField(verbose_name=\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0446\u0435\u043d\u044b \u0437\u0430 \u043d\u0435\u0434\u0435\u043b\u044e (%)\") date_added = models.DateTimeField(verbose_name=\"\u0414\u0430\u0442\u0430 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f\", auto_now=True) coinlib_id = models.PositiveIntegerField(verbose_name=\"Id \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 Coinlib.io\") image = models.CharField(verbose_name=\"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\", max_length=1000) def __str__(self): return f\"{self.name} ({self.abbreviation})\" class Ownership(models.Model): user = models.ForeignKey(User, verbose_name=\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\", on_delete=models.CASCADE) currency = models.ForeignKey(Currency, verbose_name=\"\u0412\u0430\u043b\u044e\u0442\u0430\", on_delete=models.CASCADE) count = models.IntegerField(verbose_name=\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u043b\u044e\u0442\u044b \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\", default=0) class Meta: unique_together = ('user', 'currency') def __str__(self): return f\"{self.user.username} - {self.currency.name}\" class Tag(models.Model): title = models.CharField(verbose_name=\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\", max_length=15, unique=True) def __str__(self): return self.title class Discussion(models.Model): user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True) tags = models.ManyToManyField(Tag, verbose_name=\"\u0422\u044d\u0433\u0438\") title = models.CharField(verbose_name=\"\u0422\u0435\u043c\u0430 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f\", max_length=80) description = models.TextField(verbose_name=\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\") date_added = models.DateTimeField(verbose_name=\"\u0414\u0430\u0442\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438\", auto_now=True) def __str__(self): return f\"{self.user.username} - {self.date_added}: {self.title}\" class Comment(models.Model): user = models.ForeignKey(User, verbose_name=\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\", on_delete=models.SET_NULL, null=True) discussion = models.ForeignKey(Discussion, verbose_name=\"\u041e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435\", on_delete=models.CASCADE) body = models.TextField(verbose_name=\"\u0422\u0435\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\") date_added = models.DateTimeField(verbose_name=\"\u0414\u0430\u0442\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438\", auto_now=True) def __str__(self): return f\"{self.user.username} ({self.date_added})\" class Transaction(models.Model): TR_TYPE = ( ('b', 'buy'), ('s', 'sell') ) user = models.ForeignKey(User, on_delete=models.RESTRICT) currency = models.ForeignKey(Currency, on_delete=models.RESTRICT) transaction_type = models.CharField(max_length=1, choices=TR_TYPE) count = models.IntegerField() transaction_amount = models.DecimalField(max_digits=40, decimal_places=20) transaction_time = models.DateTimeField(auto_now=True)","title":"\u041c\u043e\u0434\u0435\u043b\u044c"},{"location":"labs/lr3/#views","text":"views.py class CurrenciesListApiView(generics.ListAPIView): \"\"\" Displaying all currencies \"\"\" serializer_class = serializers.CurrencySerializer queryset = Currency.objects.all() filter_backends = [filters.SearchFilter, filters.OrderingFilter] search_fields = [\"name\", \"abbreviation\"] ordering_fields = ['price', 'date_added'] class PopularCurrenciesListApiView(generics.ListAPIView): \"\"\" Displaying first three currencies \"\"\" serializer_class = serializers.CurrencySerializer queryset = Currency.objects.filter(id__lte=3) class CurrencyInfoApiView(generics.RetrieveAPIView): \"\"\" Displaying information about the currency by id \"\"\" serializer_class = serializers.CurrencySerializer queryset = Currency.objects.all() class CurrencyCreateApiView(generics.CreateAPIView): \"\"\" Creates currency \"\"\" serializer_class = serializers.CurrencySerializer permission_classes = (permissions.IsAdminUser,) class AllOwnershipListApiView(generics.ListAPIView): \"\"\" Displaying all ownerships for admins \"\"\" serializer_class = serializers.OwnershipSerializer queryset = Ownership.objects.all() permission_classes = (permissions.IsAdminUser,) class UserOwnershipsListApiView(generics.ListAPIView): \"\"\" Displaying user ownerships \"\"\" serializer_class = serializers.OwnershipSerializer permission_classes = (permissions.IsAuthenticated,) def get_queryset(self): user = self.request.user if not user.is_authenticated: raise PermissionDenied() return Ownership.objects.filter(user=user) class OwnershipCreateApiView(APIView): \"\"\" Creates ownership \"\"\" permission_classes = (permissions.IsAuthenticated,) def post(self, request): user = request.user if not user.is_authenticated: raise PermissionDenied() request_data = request.data.copy() request_data[\"user\"] = user.id serializer = serializers.OwnershipSerializer(data=request_data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class OwnershipUpdateApiView(generics.UpdateAPIView): \"\"\" Updates ownership \"\"\" queryset = Ownership.objects.all() serializer_class = serializers.OwnershipUpdateSerializer permission_classes = (permissions.IsAuthenticated,) class TransactionCreateApiView(APIView): \"\"\" Creates transaction \"\"\" permission_classes = (permissions.IsAuthenticated,) def post(self, request): user = request.user if not user.is_authenticated: raise PermissionDenied() request_data = request.data.copy() request_data[\"user\"] = user.id serializer = serializers.TransactionSerializer(data=request_data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class AllTransactionListApiView(generics.ListAPIView): \"\"\" Displaying all transaction for admins \"\"\" serializer_class = serializers.TransactionSerializer queryset = Transaction.objects.all() permission_classes = (permissions.IsAdminUser,) class UserTransactionsListApiView(generics.ListAPIView): \"\"\" Displaying user transactions \"\"\" serializer_class = serializers.TransactionSerializer permission_classes = (permissions.IsAuthenticated,) def get_queryset(self): user = self.request.user if not user.is_authenticated: raise PermissionDenied() return Transaction.objects.filter(user=user) class DiscussionCreateApiView(APIView): \"\"\" Creates discussion \"\"\" permission_classes = (permissions.IsAuthenticated,) def post(self, request): user = request.user if not user.is_authenticated: raise PermissionDenied() request_data = request.data.copy() request_data[\"user\"] = user.id serializer = serializers.DiscussionSerializer(data=request_data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class DiscussionsListApiView(generics.ListAPIView): \"\"\" Show all discussions \"\"\" serializer_class = serializers.DiscussionSerializer queryset = Discussion.objects.all() class TagCreateApiView(generics.CreateAPIView): \"\"\" Creates tag \"\"\" serializer_class = serializers.TagSerializer permission_classes = (permissions.IsAdminUser,) class TagsListApiView(generics.ListAPIView): \"\"\" Show all tags \"\"\" serializer_class = serializers.TagSerializer queryset = Tag.objects.all() class CommentCreateApiView(APIView): \"\"\" Creates comment \"\"\" permission_classes = (permissions.IsAuthenticated,) def post(self, request): user = request.user if not user.is_authenticated: raise PermissionDenied() request_data = request.data.copy() request_data[\"user\"] = user.id serializer = serializers.CommentSerializer(data=request_data) if serializer.is_valid(): serializer.save() return Response(serializer.data, status=status.HTTP_201_CREATED) return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) class CommentsListApiView(APIView): \"\"\" Show comments for special discussion \"\"\" def get_objects(self, discussion_id): return Comment.objects.filter(discussion=discussion_id) def get(self, request, pk): comments = self.get_objects(pk) serializer = serializers.CommentSerializer(comments, many=True) return Response(serializer.data, status=status.HTTP_200_OK)","title":"Views"},{"location":"labs/lr3/#url","text":"crypto_wallet_app/urls.py urlpatterns = [ path('doc/swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'), path('doc/redoc', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'), path('currencies/', views.CurrenciesListApiView.as_view()), path('currencies/popular/', views.PopularCurrenciesListApiView.as_view()), path('currencies/<int:pk>/', views.CurrencyInfoApiView.as_view()), path('currencies/create/', views.CurrencyCreateApiView.as_view()), path('ownerships/all/', views.AllOwnershipListApiView.as_view()), path('ownerships/', views.UserOwnershipsListApiView.as_view()), path('ownerships/create/', views.OwnershipCreateApiView.as_view()), path('ownerships/change_count/<int:pk>/', views.OwnershipUpdateApiView.as_view()), path('transactions/all/', views.AllTransactionListApiView.as_view()), path('transactions/', views.UserTransactionsListApiView.as_view()), path('transactions/create/', views.TransactionCreateApiView.as_view()), path('discussions/', views.DiscussionsListApiView.as_view()), path('discussions/create/', views.DiscussionCreateApiView.as_view()), path('tags/', views.TagsListApiView.as_view()), path('tags/create/', views.TagCreateApiView.as_view()), path('comments/create/', views.CommentCreateApiView.as_view()), path('comments/<int:pk>', views.CommentsListApiView.as_view()), ]","title":"URL \u043f\u0430\u0442\u0442\u0435\u0440\u043d\u044b"},{"location":"labs/lr3/#api_1","text":"","title":"API"},{"location":"labs/lr4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0431\u0438\u0440\u0436\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js. Router router/index.js import {createRouter, createWebHistory} from 'vue-router' const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: '/', name: 'welcome', component: () => import('@/views/WelcomeView.vue'), meta: { layout: 'DefaultLayout' } }, { path: '/login', name: 'login', component: () => import('@/views/LoginView.vue'), meta: { layout: 'AuthLayout' } }, { path: '/register', name: 'register', component: () => import('@/views/RegisterView.vue'), meta: { layout: 'AuthLayout' } }, { path: '/currency/:id', name: 'currency', component: () => import('@/views/CurrencyView.vue'), meta: { layout: 'DefaultLayout' } }, { path: '/market', name: 'market', component: () => import('@/views/MarketView.vue'), meta: { layout: 'DefaultLayout' } }, { path: '/profile', name: 'profile', component: () => import('@/views/ProfileView.vue'), meta: { layout: 'DefaultLayout' } }, { path: '/change_password', name: 'change_password', component: () => import('@/views/ChangePasswordView.vue'), meta: { layout: 'AuthLayout' } } ] }) export default router Components BuySellButtonsBlock.vue - \u0431\u043b\u043e\u043a \u043a\u043d\u043e\u043f\u043e\u043a \"\u043a\u0443\u043f\u0438\u0442\u044c\" \u0438 \"\u043f\u0440\u043e\u0434\u0430\u0442\u044c\" \u0434\u043b\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442 <template> <div class=\"d-grid gap-2\"> <button type=\"button\" id=\"buy\" class=\"btn btn-outline-success btn-lg\" @click=\"buyButtonPressed\">\u041a\u0443\u043f\u0438\u0442\u044c</button> </div> <div class=\"d-grid gap-2\"> <button type=\"button\" id=\"sell\" class=\"btn btn-outline-danger btn-lg\" @click=\"sellButtonPressed\">\u041f\u0440\u043e\u0434\u0430\u0442\u044c</button> </div> </template> <script> import $ from \"jquery\" const TransactionType = {S: 's', B: 'b'} const currencyCountForTransaction = 1 export default { name: \"BuySellButtonsBlock\", data() { return { ownership: \"\" } }, props: { currency: null }, created() { if (Object.keys(this.currency).length !== 0) { this.getOwnership() } else { const unwatch = this.$watch('currency', () => { this.getOwnership() unwatch() }) } }, methods: { getOwnership() { $.ajax({ url: `http://127.0.0.1:8000/ownerships/currency/${this.currency.id}`, type: \"GET\", success: (response) => { this.ownership = response } }) }, createOwnership(count) { $.ajax({ url: \"http://127.0.0.1:8000/ownerships/create/\", type: \"POST\", data: { currency: this.currency.id, count: count, }, success: (response) => { this.ownership = response alert(`\u041f\u043e\u043a\u0443\u043f\u043a\u0430 ${count} ${this.currency.abbreviation}`) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) } }) }, changeOwnership(count, type) { let operation = \"\" switch (type) { case TransactionType.S: operation = \"\u041f\u0440\u043e\u0434\u0430\u0436\u0430\"; break; default: operation = \"\u041f\u043e\u043a\u0443\u043f\u043a\u0430\" } $.ajax({ url: `http://127.0.0.1:8000/ownerships/change_count/${this.ownership.id}/`, type: \"PATCH\", data: { count: count }, success: () => { this.getOwnership() alert(`${operation} ${currencyCountForTransaction} ${this.currency.abbreviation}`) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) } }) }, createTransaction(type, count) { $.ajax({ url: \"http://127.0.0.1:8000/transactions/create/\", type: \"POST\", data: { currency: this.currency.id, transaction_type: type.toString(), count: count, transaction_amount: count }, error: (response) => { console.log(response) alert(Object.values(response.responseJSON)[0]) } }) }, buyButtonPressed() { if (this.ownership) { this.changeOwnership(this.ownership.count + currencyCountForTransaction) } else { this.createOwnership(currencyCountForTransaction) } this.createTransaction(TransactionType.B, currencyCountForTransaction) }, sellButtonPressed() { if (this.ownership) { const remainder = this.ownership.count - currencyCountForTransaction if (remainder >= 0) { this.createTransaction(TransactionType.S, currencyCountForTransaction) this.changeOwnership(remainder, TransactionType.S) } else { alert(\"\u0412\u044b \u043f\u044b\u0442\u0430\u0435\u0442\u0435\u0441\u044c \u043f\u0440\u043e\u0434\u0430\u0442\u044c \u0432\u0430\u043b\u044e\u0442\u044b \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c\") } } else { alert(\"\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0434\u0430\u0442\u044c \u0432\u0430\u043b\u044e\u0442\u0443, \u0435\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0441\u0442\u0438\") } } } } </script> ChangePasswordForm.vue - POST-\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f <template> <form method=\"post\" @submit.prevent=\"changePassword\"> <div class=\"container pb-4\"> <router-link class=\"logo-link\" to=\"/\"> <img class=\"filter-logo\" src=\"@/assets/wallet2.svg\" alt=\"Wallet\" width=\"50\" height=\"50\"> <p class=\"fs-3\">crypto wallet</p> </router-link> </div> <div class=\"form-floating mb-2\"> <input v-model=\"current_password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"current_password\" placeholder=\"Password\" required> <label for=\"current_password\">\u0421\u0442\u0430\u0440\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c</label> </div> <hr/> <div class=\"form-floating pb-1\"> <input v-model=\"new_password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"new_password\" placeholder=\"Password\" required> <label for=\"new_password\">\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c</label> </div> <div class=\"form-floating pb-5\"> <input v-model=\"re_new_password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"re_new_password\" placeholder=\"Password\" required> <label for=\"re_new_password\">\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437</label> </div> <button class=\"w-100 btn btn-lg btn-main mb-3\" type=\"submit\">\u0421\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c</button> <div> <router-link to=\"/profile\" class=\"link-side\">\u041d\u0430\u0437\u0430\u0434</router-link> </div> </form> </template> <script> import $ from \"jquery\" export default { name: \"ChangePasswordForm\", data() { return { current_password: \"\", new_password: \"\", re_new_password: \"\" } }, methods: { changePassword() { $.ajax({ url: \"http://127.0.0.1:8000/auth/users/set_password/\", type: \"POST\", data: { new_password: this.new_password, re_new_password: this.re_new_password, current_password: this.current_password }, success: () => { console.log(\"success\") alert(\"\u0412\u0430\u0448 \u043f\u0430\u0440\u043e\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\") this.$router.push({name: \"profile\"}) }, error: (response) => { console.log(response) alert(Object.values(response.responseJSON)[0]) this.new_password = \"\" this.re_new_password = \"\" this.current_password = \"\" } }) } } } </script> CurrenciesList.vue - \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0430\u043b\u044e\u0442 <template> <div class=\"row row-cols-1 g-4\"> <div class=\"col\"> <div v-for=\"currency in currencies\" v-bind:key=\"currency\" class=\"card shadow-sm my-3\"> <router-link :to=\"'/currency/' + currency.id\" class=\"btn btn-light card-bg-color text-left\"> <div class=\"row d-flex align-items-center px-4\"> <div class=\"col-5 col-sm-3 col-xl-1 col-lg-2 d-flex justify-content-center\"> <img :src=\"currency.image\" style=\"max-height:100px; max-width:100px;\" class=\"img rounded-start\" alt=\"{{currency.name}}\"> </div> <div class=\"col-7 col-sm-9 col-xl-11 col-lg-10\"> <div class=\"card-body\"> <h5 class=\"card-title card-main-color\">{{ currency.name }}</h5> <div class=\"row row-cols-1 row-cols-lg-2 row-cols-xl-4 pb-3\"> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">1 {{ currency.abbreviation }}:</small> ${{ parseFloat(currency.price) }}</p> </div> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">\u0412\u0441\u0435\u0433\u043e \u0432 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438:</small> {{ formatNumber(currency.count, 2) }}</p> </div> <div class=\"col\"> <p :class=\"defineChangesColor(currency.daily_changes)\"><small class=\"card-muted-color\">24 \u0447\u0430\u0441\u0430:</small> {{ currency.daily_changes }}%</p> </div> <div class=\"col\"> <p :class=\"defineChangesColor(currency.weekly_changes)\"><small class=\"card-muted-color\">7 \u0434\u043d\u0435\u0439:</small> {{ currency.weekly_changes }}%</p> </div> </div> <p class=\"card-main-color\"><small class=\"card-muted-color\">Date added: {{ formatDate(currency.date_added) }}</small></p> </div> </div> </div> </router-link> </div> </div> </div> </template> <script> export default { name: \"CurrenciesList\", props: { currencies: Array }, methods: { defineChangesColor(changes) { return changes >= 0 ? \"card-success\" : \"card-danger\" }, formatDate(dateStr) { const date = new Date(dateStr); return date.getDate() + \".\" + (date.getMonth() + 1) + \".\" + date.getFullYear(); }, formatNumber(num, digits) { const lookup = [ {value: 1, symbol: \"\"}, {value: 1e3, symbol: \"k\"}, {value: 1e6, symbol: \"M\"}, {value: 1e9, symbol: \"B\"}, {value: 1e12, symbol: \"T\"}, {value: 1e15, symbol: \"P\"}, {value: 1e18, symbol: \"E\"} ]; const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/; const item = lookup.slice().reverse().find(function (item) { return num >= item.value; }); return item ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol : \"0\"; } } } </script> <style scoped> </style> CurrencyChart.vue - \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u043e\u0441\u0442\u0430 \u0446\u0435\u043d\u044b \u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u0443, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u044b\u0439 \u0441 coinlib.io <template> <div style=\"height:560px; background-color: #FFFFFF; overflow:hidden; box-sizing: border-box; border: 1px solid rgb(94, 94, 94); border-radius: 4px; text-align: right; line-height:14px; font-size: 12px; font-feature-settings: normal; box-shadow: inset 0 -20px 0 0 rgb(94, 94, 94); padding:1px; margin: 0; width: 100%;\"> <div style=\"height:540px; padding:0; margin:0; width: 100%;\" id=\"currency\"> <iframe :src=\"`https://widget.coinlib.io/widget?type=chart&theme=light&coin_id=${currency_coinlib_id}&pref_coin_id=1505`\" width=\"100%\" height=\"536px\" border=\"0\" style=\"border:0; margin:0; padding:0; line-height:14px;\"></iframe> </div> <div style=\"color: #FFFFFF; line-height: 14px; font-weight: 400; font-size: 11px; box-sizing: border-box; padding: 2px 6px; width: 100%; font-family: Verdana, Tahoma, Arial, sans-serif;\"> <a href=\"https://coinlib.io\" target=\"_blank\" style=\"font-weight: 500; color: #FFFFFF; text-decoration:none; font-size:11px\"> Cryptocurrency Prices </a>&nbsp;by Coinlib </div> </div> </template> <script> export default { name: \"CurrencyChart\", props: { currency_coinlib_id: 859 } } </script> CurrencyFiltersBlock.vue - \u0431\u043b\u043e\u043a \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0441\u043a\u0430 \u0432\u0430\u043b\u044e\u0442 \u043d\u0430 \u0440\u0430\u043d\u043a\u0435 <template> <div class=\"container pt-5\"> <div class=\"input-group\"> <form class=\"form-floating\" @submit.prevent=\"filterBySearchString\"> <input v-model=\"searchString\" class=\"form-control\" type=\"search\" id=\"searchInput\" placeholder=\"\u041f\u043e\u0438\u0441\u043a \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b (\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u0441\u0438\u043c\u0432\u043e\u043b)\" aria-label=\"Search\"> <label for=\"searchInput\">\u041f\u043e\u0438\u0441\u043a \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b (\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u0441\u0438\u043c\u0432\u043e\u043b)</label> </form> <button class=\"btn btn-main\" type=\"submit\">Search</button> </div> <button class=\"btn btn-main mx-3 mt-3\" @click=\"sortByDateButtonPressed\">\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0434\u0430\u0442\u0435 {{ sortByDateButtonSign }} </button> <button class=\"btn btn-main mx-3 mt-3\" @click=\"sortByPriceButtonPressed\">\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0446\u0435\u043d\u0435 {{ sortByPriceButtonSign }} </button> </div> </template> <script> export default { name: \"CurrencyFiltersBlock\", data() { return { searchString: \"\", sortByDateDesc: false, sortByPriceDesc: false, sortByDateButtonSign: '', sortByPriceButtonSign: '', filterURL: \"\" } }, props: { baseURL: String }, created() { if (this.baseURL) { this.filterURL = this.baseURL } else { const unwatch = this.$watch('baseURL', () => { this.filterURL = this.baseURL unwatch() }) } }, watch: { filterURL(newUrl) { if (this.filterURL !== this.baseURL) { this.$emit('response', newUrl) } } }, methods: { sortByDateButtonPressed() { this.sortByDateDesc = !this.sortByDateDesc this.sortByPriceButtonSign = ' ' if (this.sortByDateDesc) { this.sortByDateButtonSign = '\u2191' this.addSearchParam(\"ordering\", \"date_added\") } else { this.sortByDateButtonSign = '\u2193' this.addSearchParam(\"ordering\", \"-date_added\") } }, filterBySearchString() { this.addSearchParam(\"search\", this.searchString) }, sortByPriceButtonPressed() { this.sortByPriceDesc = !this.sortByPriceDesc this.sortByDateButtonSign = ' ' if (this.sortByPriceDesc) { this.sortByPriceButtonSign = '\u2191' this.addSearchParam(\"ordering\", \"price\") } else { this.sortByPriceButtonSign = '\u2193' this.addSearchParam(\"ordering\", \"-price\") } }, addSearchParam(param, value) { let newUrl = new URL(this.filterURL) newUrl.searchParams.set(param, value) this.filterURL = newUrl.toString() } } } </script> FooterBlock.vue - \u0444\u0443\u0442\u0435\u0440 <template> <footer class=\"bg-navbar\"> <div class=\"container\"> <p class=\"col-md-4 mb-0 color-main py-3\">&copy; 2022 Crypto Wallet, Inc</p> </div> </footer> </template> <script> export default { name: \"FooterBlock\" } </script> <style scoped> </style> HeaderNavBar.vue - \u0445\u0435\u0434\u0435\u0440 <template> <header class=\"p-3 border-bottom bg-navbar\"> <div class=\"container\"> <div class=\"d-flex flex-wrap align-items-baseline justify-content-center\"> <router-link to=\"/\" class=\"navbar-logo\"> <img class=\"filter-logo\" src=\"@/assets/wallet2.svg\" alt=\"Wallet\" width=\"32\" height=\"32\"> crypto wallet </router-link> <ul class=\"nav col-12 col-lg-auto me-lg-auto justify-content-center\"> <li> <router-link to=\"/market\" class=\"nav-link px-3 link-main\">\u0420\u044b\u043d\u043a\u0438</router-link> </li> </ul> <div v-if=\"isAuth\" class=\"btn-group\"> <button @click=\"$router.push({name: 'profile'})\" type=\"button\" class=\"btn btn-main btn-md\"> \u041f\u0440\u043e\u0444\u0438\u043b\u044c </button> <button type=\"button\" class=\"btn btn-md btn-main dropdown-toggle dropdown-toggle-split\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"> <span class=\"visually-hidden\">Toggle Dropdown</span> </button> <ul class=\"dropdown-menu dropdown-menu-dark\"> <li> <button @click=\"$router.push({name: 'profile'})\" class=\"dropdown-item\">\u041f\u0440\u043e\u0444\u0438\u043b\u044c</button> </li> <li> <hr class=\"dropdown-divider\"> </li> <li> <button @click=\"logout\" class=\"dropdown-item\">\u0412\u044b\u0439\u0442\u0438</button> </li> </ul> </div> <div v-else class=\"btn-group\"> <button @click=\"$router.push({name: 'register'})\" type=\"button\" class=\"btn btn-main btn-md\"> \u041f\u0440\u043e\u0444\u0438\u043b\u044c </button> <button type=\"button\" class=\"btn btn-md btn-main dropdown-toggle dropdown-toggle-split\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"> <span class=\"visually-hidden\">Toggle Dropdown</span> </button> <ul class=\"dropdown-menu dropdown-menu-dark\"> <li><button @click=\"$router.push({name: 'login'})\" class=\"dropdown-item\">\u0412\u043e\u0439\u0442\u0438</button></li> <li> <hr class=\"dropdown-divider\"> </li> <li><button @click=\"$router.push({name: 'register'})\" class=\"dropdown-item\">\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button></li> </ul> </div> </div> </div> </header> </template> <script> import $ from \"jquery\" export default { name: \"HeaderNavBar\", data() { return { isAuth: false } }, created() { this.isAuth = !!localStorage.getItem(\"auth_token\") }, watch: { $route() { this.isAuth = !!localStorage.getItem(\"auth_token\") } }, methods: { logout() { $.ajax({ url: \"http://127.0.0.1:8000/auth/token/logout\", type: \"POST\", success: () => { localStorage.setItem(\"auth_token\", \"\") delete $.ajaxSettings.headers['Authorization'] this.isAuth = false, this.$router.push({name: \"welcome\"}) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) } }) } } } </script> <style scoped> </style> LoginForm.vue - \u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 <template> <form method=\"post\" @submit.prevent=\"login\"> <div class=\"container pb-4\"> <router-link class=\"logo-link\" to=\"/\"> <img class=\"filter-logo\" src=\"@/assets/wallet2.svg\" alt=\"Wallet\" width=\"50\" height=\"50\"> <p class=\"fs-3\">crypto wallet</p> </router-link> </div> <div class=\"form-floating mb-2\"> <input v-model=\"username\" name=\"username\" class=\"form-control\" id=\"floatingInput\" placeholder=\"username\"> <label for=\"floatingInput\">Username</label> </div> <div class=\"form-floating pb-5\"> <input v-model=\"password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"floatingPassword\" placeholder=\"Password\"> <label for=\"floatingPassword\">Password</label> </div> <button class=\"w-100 btn btn-lg btn-main mb-3\" type=\"submit\">Sign in</button> \u041d\u0435\u0442 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430? <router-link to=\"/register\" class=\"link-side\">\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</router-link> </form> </template> <script> import $ from \"jquery\" export default { name: \"LoginView\", data() { return { username: \"\", password: \"\" } }, methods: { login() { $.ajax({ url: \"http://127.0.0.1:8000/auth/token/login\", type: \"POST\", data: { username: this.username, password: this.password }, success: (response) => { localStorage.setItem(\"auth_token\", response.auth_token) $.ajaxSetup({headers: {'Authorization': \"Token\" + \" \" + response.auth_token}}) this.$router.push({name: \"welcome\"}) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) this.password = \"\" } }) } } } </script> <style> </style> ProfileUserBlock.vue - \u0431\u043b\u043e\u043a \u0441 \u043a\u043d\u043e\u043f\u043a\u0430\u043c\u0438 \"\u0432\u044b\u0439\u0442\u0438\" \u0438 \"\u0441\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c\" \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f <template> <div class=\"container pt-5 pb-3 text-center\"> <div class=\"row pb-3\"> <div class=\"col\"> <h1>\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {{ user.username }}</h1> </div> </div> <div class=\"row justify-content-center\"> <div class=\"col-auto\"> <button type=\"button\" class=\"btn btn-outline-secondary\" @click=\"this.$router.push({name: 'change_password'})\">\u0421\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c </button> </div> <div class=\"col-auto\"> <button type=\"button\" class=\"btn btn-outline-danger\" @click=\"logout\">\u0412\u044b\u0439\u0442\u0438</button> </div> </div> </div> </template> <script> import $ from \"jquery\" export default { name: \"ProfileUserBlock\", data() { return { user: {} } }, created() { this.loadUser() }, methods: { loadUser() { $.ajax({ url: 'http://127.0.0.1:8000/auth/users/me', type: \"GET\", success: (response) => { this.user = response } }) }, logout() { $.ajax({ url: \"http://127.0.0.1:8000/auth/token/logout\", type: \"POST\", success: () => { localStorage.setItem(\"auth_token\", \"\") delete $.ajaxSettings.headers['Authorization'] this.$router.push({name: \"welcome\"}) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) } }) } } } </script> RegisterForm.vue - \u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 <template> <form method=\"post\" @submit.prevent=\"register\"> <div class=\"container pb-4\"> <router-link class=\"logo-link\" to=\"/\"> <img class=\"filter-logo\" src=\"@/assets/wallet2.svg\" alt=\"Wallet\" width=\"50\" height=\"50\"> <p class=\"fs-3\">crypto wallet</p> </router-link> </div> <div class=\"input-group mb-2\"> <span class=\"input-group-text bg-side text-light\">@</span> <div class=\"form-floating\"> <input v-model=\"username\" type=\"text\" name=\"username\" class=\"form-control\" id=\"floatingInputGroup1\" placeholder=\"Username\"> <label for=\"floatingInputGroup1\">Username</label> </div> </div> <div class=\"form-floating mb-2\"> <input v-model=\"email\" type=\"email\" name=\"email\" class=\"form-control\" id=\"floatingInput\" placeholder=\"name@example.com\"> <label for=\"floatingInput\">Email address</label> </div> <div class=\"form-floating pb-5\"> <input v-model=\"password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"floatingPassword\" placeholder=\"Password\"> <label for=\"floatingPassword\">Password</label> </div> <button class=\"w-100 btn btn-lg btn-main mb-3\" type=\"submit\">\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button> \u0423\u0436\u0435 \u0435\u0441\u0442\u044c \u0430\u043a\u043a\u0430\u0443\u043d\u0442? <router-link to=\"/login\" href=\"signin.html\" class=\"link-side\">\u0412\u043e\u0439\u0442\u0438</router-link> </form> </template> <script> import $ from \"jquery\"; export default { name: \"RegisterForm\", data() { return { username: \"\", email: \"\", password: \"\" } }, methods: { register() { $.ajax({ url: \"http://127.0.0.1:8000/auth/users/\", type: \"POST\", data: { username: this.username, email: this.email, password: this.password }, success: () => { alert(\"\u0412\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438\u0441\u044c!\") this.$router.push({name: \"login\"}) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) this.password = \"\" } }) } } } </script> <style> </style> UserCurrenciesList.vue - \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0432\u0430\u043b\u044e\u0442 <template> <div class=\"row row-cols-1 g-4\"> <div class=\"col\"> <div v-for=\"ownership in ownerships\" v-bind:key=\"ownership\" class=\"card shadow-sm my-3\"> <router-link :to=\"'/currency/' + ownership.currency.id\" class=\"btn btn-light card-bg-color text-left\"> <div class=\"row d-flex align-items-center px-4\"> <div class=\"col-5 col-sm-3 col-xl-1 col-lg-2 d-flex justify-content-center\"> <img :src=\"ownership.currency.image\" style=\"max-height:100px; max-width:100px;\" class=\"img rounded-start\" alt=\"{{ownership.currency.name}}\"> </div> <div class=\"col-7 col-sm-9 col-xl-11 col-lg-10\"> <div class=\"card-body\"> <h5 class=\"card-title card-main-color\">{{ ownership.currency.name }}</h5> <div class=\"row row-cols-1 row-cols-lg-2 row-cols-xl-4 pb-3\"> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">1 {{ ownership.currency.abbreviation }}:</small> ${{ parseFloat(ownership.currency.price) }}</p> </div> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">\u0412\u0441\u0435\u0433\u043e \u0432 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u0435:</small> {{ ownership.count }}</p> </div> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">\u0426\u0435\u043d\u0430 \u0432 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u0435:</small> ${{ parseFloat(ownership.currency.price * ownership.count) }}</p> </div> </div> </div> </div> </div> </router-link> </div> </div> </div> </template> <script> export default { name: \"UserCurrenciesList\", props: { ownerships: Array }, } </script> WelcomeSection.vue - \u0441\u0435\u043a\u0446\u0438\u044f \u0441 \u043a\u0440\u0430\u0442\u043a\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 \u043f\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0441\u0430\u0439\u0442\u0430 <template> <section> <div class=\"container\"> <div class=\"row d-flex align-items-center\"> <div class=\"col-12 col-lg-6\"> <div class=\"menu-image h-100 d-flex align-items-start\"> <img src=\"@/assets/crypto-currency-isometric-design.png\" class=\"img-fluid\" alt=\"menu image\"> </div> </div> <div class=\"col-12 col-lg-6\"> <div class=\"menu-text flex-grow-1 py-2 px-5\"> <div class=\"py-4\"> <h2 class=\"text-left\">\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u0440\u0438\u043f\u0442\u043e\u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c</h2> <p class=\"fw-lighter fs-4\">\u0417\u0430 \u0442\u0440\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0448\u0430\u0433\u0430</p> </div> <div class=\"menu-content\"> <h3 class=\"h3-text-color py-2\">1. \u041f\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u0448\u0435\u043b\u0435\u043a</h3> <p class=\"fw-lighter\">\u041f\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 \u043a\u043e\u0448\u0435\u043b\u0435\u043a \u0438 \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u0442\u043e\u0440\u0433\u043e\u0432\u0430\u0442\u044c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u043e\u0439. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u0448\u0435\u043b\u0435\u043a \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438.</p> </div> <div class=\"menu-content\"> <h3 class=\"h3-text-color py-2\">2. \u041f\u0440\u043e\u0439\u0434\u0438\u0442\u0435 \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e</h3> <p class=\"fw-lighter\">\u041f\u0440\u043e\u0439\u0434\u0438\u0442\u0435 \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</p> </div> <div class=\"menu-content\"> <h3 class=\"h3-text-color py-2\">3. \u041d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435</h3> <p class=\"fw-lighter\">\u0412\u0441\u0435 \u0433\u043e\u0442\u043e\u0432\u043e! \u041f\u043e\u043a\u0443\u043f\u0430\u0439\u0442\u0435/\u043f\u0440\u043e\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0443, \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0439\u0442\u0435 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0434\u043b\u044f \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439.</p> </div> </div> <button @click=\"checkAuthForStart\" type=\"button\" class=\"btn btn-lg btn-main my-5 mx-5\"> \u041d\u0430\u0447\u0430\u0442\u044c! </button> </div> </div> </div> </section> </template> <script> export default { name: \"WelcomeSection\", methods: { checkAuthForStart() { if (localStorage.getItem(\"auth_token\")) { this.$router.push({name: \"market\"}) } else { this.$router.push({name: \"login\"}) } } } } </script> <style scoped> </style> Views ChangePasswordView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f <template> <ChangePasswordForm/> </template> <script> import ChangePasswordForm from \"../components/ChangePasswordForm.vue\"; export default { name: \"ChangePasswordView\", components: { ChangePasswordForm } } </script> CurrencyView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0430\u043b\u044e\u0442\u0435 \u0438 \u0432\u044b\u043f\u043e\u043b\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439 <template> <div class=\"container py-5\"> <div class=\"row row-cols-2\"> <div class=\"col-12 pb-3\"> <CurrencyChart :currency_coinlib_id=\"currency.coinlib_id\"/> </div> <BuySellButtonsBlock :currency=\"currency\" v-if=\"currency\"/> </div> </div> </template> <script> import $ from \"jquery\" import CurrencyChart from \"../components/CurrencyChart.vue\"; import BuySellButtonsBlock from \"../components/BuySellButtonsBlock.vue\"; export default { name: \"CurrencyView\", data() { return { currency: {} } }, created() { this.loadCurrency(this.$route.params.id) }, methods: { loadCurrency(id) { $.ajax({ url: `http://127.0.0.1:8000/currencies/${id}/`, type: \"GET\", success: (response) => { this.currency = response } }) } }, components: { CurrencyChart, BuySellButtonsBlock } } </script> LoginView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 <template> <LoginForm/> </template> <script> import LoginForm from \"../components/LoginForm.vue\"; export default { name: \"LoginView\", components: { LoginForm } } </script> MarketView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0440\u044b\u043d\u043a\u0430 \u0432\u0430\u043b\u044e\u0442\u044b <template> <section> <div class=\"container pt-5 pb-3\"> <h1> \u0420\u044b\u043d\u043e\u043a \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b </h1> </div> <hr class=\"featurette-divider\"> <CurrencyFiltersBlock :baseURL=\"baseURL\" @response=\"(loadURL) => loadCurrencies(loadURL)\" /> <div class=\"container py-5\"> <CurrenciesList :currencies=\"currencies\"/> </div> </section> </template> <script> import $ from \"jquery\" import CurrenciesList from \"../components/CurrenciesList.vue\"; import CurrencyFiltersBlock from \"../components/CurrencyFiltersBlock.vue\"; export default { name: \"MarketView\", data() { return { currencies: [], baseURL: 'http://127.0.0.1:8000/currencies/' } }, created() { this.loadCurrencies(this.baseURL) }, methods: { loadCurrencies(url) { $.ajax({ url: url, type: \"GET\", success: (response) => { this.currencies = response } }) } }, components: { CurrenciesList, CurrencyFiltersBlock } } </script> ProfileView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435-\u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f <template> <ProfileUserBlock/> <hr class=\"featurette-divider\"> <div class=\"container py-3\"> <div class=\"row row-cols-1 g-4\"> <UserCurrenciesList :ownerships=\"ownerships\"/> </div> </div> </template> <script> import $ from \"jquery\" import UserCurrenciesList from \"../components/UserCurrenciesList.vue\"; import ProfileUserBlock from \"../components/ProfileUserBlock.vue\"; export default { name: \"ProfileView\", components: { UserCurrenciesList, ProfileUserBlock }, data() { return { ownerships: [] } }, created() { this.loadOwnerships() }, methods: { loadOwnerships() { $.ajax({ url: 'http://127.0.0.1:8000/ownerships', type: \"GET\", success: (response) => { this.ownerships = response } }) } } } </script> RegisterView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 <template> <RegisterForm/> </template> <script> import RegisterForm from \"../components/RegisterForm.vue\"; export default { name: \"RegisterView\", components: { RegisterForm } } </script> WelcomeView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 - \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043a\u0440\u0430\u043d <template> <WelcomeSection/> <section> <div class=\"container py-5\"> <div class=\"d-flex justify-content-center pb-5\"> <h2>\u041a\u0443\u043f\u0438\u0442\u044c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0443</h2> </div> <CurrenciesList :currencies=\"currencies\"/> <div class=\"d-flex justify-content-center pt-4\"> <div tabindex=\"0\"> <router-link to=\"/market\" class=\"link-side\"> \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 </router-link> </div> </div> </div> </section> </template> <script> import $ from \"jquery\" import WelcomeSection from \"../components/WelcomeSection.vue\"; import CurrenciesList from \"../components/CurrenciesList.vue\"; export default { name: \"WelcomeView\", components: { WelcomeSection, CurrenciesList }, data() { return { currencies: [] } }, created() { this.loadPopularCurrencies() }, methods: { loadPopularCurrencies() { $.ajax({ url: \"http://127.0.0.1:8000/currencies/popular/\", type: \"GET\", success: (response) => { this.currencies = response } }) } } } </script> <style scoped> </style> Layouts \u0412 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0434\u0432\u0430 \u043b\u044d\u0439\u0430\u0443\u0442\u0430: \u0411\u0430\u0437\u043e\u0432\u044b\u0439 DefaultLayout.vue <template> <HeaderNavBar/> <main class=\"min-vh-100\"> <slot/> </main> <FooterBlock/> </template> <script> import HeaderNavBar from \"../components/HeaderNavBar.vue\"; import FooterBlock from \"../components/FooterBlock.vue\"; export default { name: \"DefaultLayout\", components: { HeaderNavBar, FooterBlock } } </script> \u041b\u044d\u0439\u0430\u0443\u0442 \u0434\u043b\u044f \u0444\u043e\u0440\u043c AuthLayout.vue <template> <main class=\"text-center sign-body\"> <div class=\"sign-form w-100 m-auto\"> <slot/> </div> </main> </template> <script> export default { name: \"AuthLayout\" } </script> \u0410 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 Layout \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f AppLayout.vue <template> <component :is=\"layout\"> <slot /> </component> </template> <script> import DefaultLayout from \"./DefaultLayout.vue\"; import {shallowRef, watch} from 'vue' import { useRoute } from 'vue-router' export default { name: 'AppLayout', setup() { const layout = shallowRef(DefaultLayout) const route = useRoute() watch( () => route.meta, async meta => { try { const component = await import(`../layouts/${meta.layout}.vue`) layout.value = component?.default || DefaultLayout } catch (e) { layout.value = DefaultLayout } }, { immediate: true } ) return { layout } } } </script>","title":"Lab \u21164"},{"location":"labs/lr4/#4-vuejs","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043a\u0440\u0438\u043f\u0442\u043e\u0431\u0438\u0440\u0436\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js."},{"location":"labs/lr4/#router","text":"router/index.js import {createRouter, createWebHistory} from 'vue-router' const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: [ { path: '/', name: 'welcome', component: () => import('@/views/WelcomeView.vue'), meta: { layout: 'DefaultLayout' } }, { path: '/login', name: 'login', component: () => import('@/views/LoginView.vue'), meta: { layout: 'AuthLayout' } }, { path: '/register', name: 'register', component: () => import('@/views/RegisterView.vue'), meta: { layout: 'AuthLayout' } }, { path: '/currency/:id', name: 'currency', component: () => import('@/views/CurrencyView.vue'), meta: { layout: 'DefaultLayout' } }, { path: '/market', name: 'market', component: () => import('@/views/MarketView.vue'), meta: { layout: 'DefaultLayout' } }, { path: '/profile', name: 'profile', component: () => import('@/views/ProfileView.vue'), meta: { layout: 'DefaultLayout' } }, { path: '/change_password', name: 'change_password', component: () => import('@/views/ChangePasswordView.vue'), meta: { layout: 'AuthLayout' } } ] }) export default router","title":"Router"},{"location":"labs/lr4/#components","text":"","title":"Components"},{"location":"labs/lr4/#buysellbuttonsblockvue-","text":"<template> <div class=\"d-grid gap-2\"> <button type=\"button\" id=\"buy\" class=\"btn btn-outline-success btn-lg\" @click=\"buyButtonPressed\">\u041a\u0443\u043f\u0438\u0442\u044c</button> </div> <div class=\"d-grid gap-2\"> <button type=\"button\" id=\"sell\" class=\"btn btn-outline-danger btn-lg\" @click=\"sellButtonPressed\">\u041f\u0440\u043e\u0434\u0430\u0442\u044c</button> </div> </template> <script> import $ from \"jquery\" const TransactionType = {S: 's', B: 'b'} const currencyCountForTransaction = 1 export default { name: \"BuySellButtonsBlock\", data() { return { ownership: \"\" } }, props: { currency: null }, created() { if (Object.keys(this.currency).length !== 0) { this.getOwnership() } else { const unwatch = this.$watch('currency', () => { this.getOwnership() unwatch() }) } }, methods: { getOwnership() { $.ajax({ url: `http://127.0.0.1:8000/ownerships/currency/${this.currency.id}`, type: \"GET\", success: (response) => { this.ownership = response } }) }, createOwnership(count) { $.ajax({ url: \"http://127.0.0.1:8000/ownerships/create/\", type: \"POST\", data: { currency: this.currency.id, count: count, }, success: (response) => { this.ownership = response alert(`\u041f\u043e\u043a\u0443\u043f\u043a\u0430 ${count} ${this.currency.abbreviation}`) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) } }) }, changeOwnership(count, type) { let operation = \"\" switch (type) { case TransactionType.S: operation = \"\u041f\u0440\u043e\u0434\u0430\u0436\u0430\"; break; default: operation = \"\u041f\u043e\u043a\u0443\u043f\u043a\u0430\" } $.ajax({ url: `http://127.0.0.1:8000/ownerships/change_count/${this.ownership.id}/`, type: \"PATCH\", data: { count: count }, success: () => { this.getOwnership() alert(`${operation} ${currencyCountForTransaction} ${this.currency.abbreviation}`) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) } }) }, createTransaction(type, count) { $.ajax({ url: \"http://127.0.0.1:8000/transactions/create/\", type: \"POST\", data: { currency: this.currency.id, transaction_type: type.toString(), count: count, transaction_amount: count }, error: (response) => { console.log(response) alert(Object.values(response.responseJSON)[0]) } }) }, buyButtonPressed() { if (this.ownership) { this.changeOwnership(this.ownership.count + currencyCountForTransaction) } else { this.createOwnership(currencyCountForTransaction) } this.createTransaction(TransactionType.B, currencyCountForTransaction) }, sellButtonPressed() { if (this.ownership) { const remainder = this.ownership.count - currencyCountForTransaction if (remainder >= 0) { this.createTransaction(TransactionType.S, currencyCountForTransaction) this.changeOwnership(remainder, TransactionType.S) } else { alert(\"\u0412\u044b \u043f\u044b\u0442\u0430\u0435\u0442\u0435\u0441\u044c \u043f\u0440\u043e\u0434\u0430\u0442\u044c \u0432\u0430\u043b\u044e\u0442\u044b \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c\") } } else { alert(\"\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0434\u0430\u0442\u044c \u0432\u0430\u043b\u044e\u0442\u0443, \u0435\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0441\u0442\u0438\") } } } } </script>","title":"BuySellButtonsBlock.vue - \u0431\u043b\u043e\u043a \u043a\u043d\u043e\u043f\u043e\u043a \"\u043a\u0443\u043f\u0438\u0442\u044c\" \u0438 \"\u043f\u0440\u043e\u0434\u0430\u0442\u044c\" \u0434\u043b\u044f \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442"},{"location":"labs/lr4/#changepasswordformvue-post-","text":"<template> <form method=\"post\" @submit.prevent=\"changePassword\"> <div class=\"container pb-4\"> <router-link class=\"logo-link\" to=\"/\"> <img class=\"filter-logo\" src=\"@/assets/wallet2.svg\" alt=\"Wallet\" width=\"50\" height=\"50\"> <p class=\"fs-3\">crypto wallet</p> </router-link> </div> <div class=\"form-floating mb-2\"> <input v-model=\"current_password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"current_password\" placeholder=\"Password\" required> <label for=\"current_password\">\u0421\u0442\u0430\u0440\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c</label> </div> <hr/> <div class=\"form-floating pb-1\"> <input v-model=\"new_password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"new_password\" placeholder=\"Password\" required> <label for=\"new_password\">\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c</label> </div> <div class=\"form-floating pb-5\"> <input v-model=\"re_new_password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"re_new_password\" placeholder=\"Password\" required> <label for=\"re_new_password\">\u041d\u043e\u0432\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c \u0435\u0449\u0435 \u0440\u0430\u0437</label> </div> <button class=\"w-100 btn btn-lg btn-main mb-3\" type=\"submit\">\u0421\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c</button> <div> <router-link to=\"/profile\" class=\"link-side\">\u041d\u0430\u0437\u0430\u0434</router-link> </div> </form> </template> <script> import $ from \"jquery\" export default { name: \"ChangePasswordForm\", data() { return { current_password: \"\", new_password: \"\", re_new_password: \"\" } }, methods: { changePassword() { $.ajax({ url: \"http://127.0.0.1:8000/auth/users/set_password/\", type: \"POST\", data: { new_password: this.new_password, re_new_password: this.re_new_password, current_password: this.current_password }, success: () => { console.log(\"success\") alert(\"\u0412\u0430\u0448 \u043f\u0430\u0440\u043e\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\") this.$router.push({name: \"profile\"}) }, error: (response) => { console.log(response) alert(Object.values(response.responseJSON)[0]) this.new_password = \"\" this.re_new_password = \"\" this.current_password = \"\" } }) } } } </script>","title":"ChangePasswordForm.vue - POST-\u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f"},{"location":"labs/lr4/#currencieslistvue-","text":"<template> <div class=\"row row-cols-1 g-4\"> <div class=\"col\"> <div v-for=\"currency in currencies\" v-bind:key=\"currency\" class=\"card shadow-sm my-3\"> <router-link :to=\"'/currency/' + currency.id\" class=\"btn btn-light card-bg-color text-left\"> <div class=\"row d-flex align-items-center px-4\"> <div class=\"col-5 col-sm-3 col-xl-1 col-lg-2 d-flex justify-content-center\"> <img :src=\"currency.image\" style=\"max-height:100px; max-width:100px;\" class=\"img rounded-start\" alt=\"{{currency.name}}\"> </div> <div class=\"col-7 col-sm-9 col-xl-11 col-lg-10\"> <div class=\"card-body\"> <h5 class=\"card-title card-main-color\">{{ currency.name }}</h5> <div class=\"row row-cols-1 row-cols-lg-2 row-cols-xl-4 pb-3\"> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">1 {{ currency.abbreviation }}:</small> ${{ parseFloat(currency.price) }}</p> </div> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">\u0412\u0441\u0435\u0433\u043e \u0432 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438:</small> {{ formatNumber(currency.count, 2) }}</p> </div> <div class=\"col\"> <p :class=\"defineChangesColor(currency.daily_changes)\"><small class=\"card-muted-color\">24 \u0447\u0430\u0441\u0430:</small> {{ currency.daily_changes }}%</p> </div> <div class=\"col\"> <p :class=\"defineChangesColor(currency.weekly_changes)\"><small class=\"card-muted-color\">7 \u0434\u043d\u0435\u0439:</small> {{ currency.weekly_changes }}%</p> </div> </div> <p class=\"card-main-color\"><small class=\"card-muted-color\">Date added: {{ formatDate(currency.date_added) }}</small></p> </div> </div> </div> </router-link> </div> </div> </div> </template> <script> export default { name: \"CurrenciesList\", props: { currencies: Array }, methods: { defineChangesColor(changes) { return changes >= 0 ? \"card-success\" : \"card-danger\" }, formatDate(dateStr) { const date = new Date(dateStr); return date.getDate() + \".\" + (date.getMonth() + 1) + \".\" + date.getFullYear(); }, formatNumber(num, digits) { const lookup = [ {value: 1, symbol: \"\"}, {value: 1e3, symbol: \"k\"}, {value: 1e6, symbol: \"M\"}, {value: 1e9, symbol: \"B\"}, {value: 1e12, symbol: \"T\"}, {value: 1e15, symbol: \"P\"}, {value: 1e18, symbol: \"E\"} ]; const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/; const item = lookup.slice().reverse().find(function (item) { return num >= item.value; }); return item ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol : \"0\"; } } } </script> <style scoped> </style>","title":"CurrenciesList.vue - \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0430\u043b\u044e\u0442"},{"location":"labs/lr4/#currencychartvue-coinlibio","text":"<template> <div style=\"height:560px; background-color: #FFFFFF; overflow:hidden; box-sizing: border-box; border: 1px solid rgb(94, 94, 94); border-radius: 4px; text-align: right; line-height:14px; font-size: 12px; font-feature-settings: normal; box-shadow: inset 0 -20px 0 0 rgb(94, 94, 94); padding:1px; margin: 0; width: 100%;\"> <div style=\"height:540px; padding:0; margin:0; width: 100%;\" id=\"currency\"> <iframe :src=\"`https://widget.coinlib.io/widget?type=chart&theme=light&coin_id=${currency_coinlib_id}&pref_coin_id=1505`\" width=\"100%\" height=\"536px\" border=\"0\" style=\"border:0; margin:0; padding:0; line-height:14px;\"></iframe> </div> <div style=\"color: #FFFFFF; line-height: 14px; font-weight: 400; font-size: 11px; box-sizing: border-box; padding: 2px 6px; width: 100%; font-family: Verdana, Tahoma, Arial, sans-serif;\"> <a href=\"https://coinlib.io\" target=\"_blank\" style=\"font-weight: 500; color: #FFFFFF; text-decoration:none; font-size:11px\"> Cryptocurrency Prices </a>&nbsp;by Coinlib </div> </div> </template> <script> export default { name: \"CurrencyChart\", props: { currency_coinlib_id: 859 } } </script>","title":"CurrencyChart.vue - \u0433\u0440\u0430\u0444\u0438\u043a \u0440\u043e\u0441\u0442\u0430 \u0446\u0435\u043d\u044b \u043d\u0430 \u0432\u0430\u043b\u044e\u0442\u0443, \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c\u044b\u0439 \u0441 coinlib.io"},{"location":"labs/lr4/#currencyfiltersblockvue-","text":"<template> <div class=\"container pt-5\"> <div class=\"input-group\"> <form class=\"form-floating\" @submit.prevent=\"filterBySearchString\"> <input v-model=\"searchString\" class=\"form-control\" type=\"search\" id=\"searchInput\" placeholder=\"\u041f\u043e\u0438\u0441\u043a \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b (\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u0441\u0438\u043c\u0432\u043e\u043b)\" aria-label=\"Search\"> <label for=\"searchInput\">\u041f\u043e\u0438\u0441\u043a \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b (\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435/\u0441\u0438\u043c\u0432\u043e\u043b)</label> </form> <button class=\"btn btn-main\" type=\"submit\">Search</button> </div> <button class=\"btn btn-main mx-3 mt-3\" @click=\"sortByDateButtonPressed\">\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0434\u0430\u0442\u0435 {{ sortByDateButtonSign }} </button> <button class=\"btn btn-main mx-3 mt-3\" @click=\"sortByPriceButtonPressed\">\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0446\u0435\u043d\u0435 {{ sortByPriceButtonSign }} </button> </div> </template> <script> export default { name: \"CurrencyFiltersBlock\", data() { return { searchString: \"\", sortByDateDesc: false, sortByPriceDesc: false, sortByDateButtonSign: '', sortByPriceButtonSign: '', filterURL: \"\" } }, props: { baseURL: String }, created() { if (this.baseURL) { this.filterURL = this.baseURL } else { const unwatch = this.$watch('baseURL', () => { this.filterURL = this.baseURL unwatch() }) } }, watch: { filterURL(newUrl) { if (this.filterURL !== this.baseURL) { this.$emit('response', newUrl) } } }, methods: { sortByDateButtonPressed() { this.sortByDateDesc = !this.sortByDateDesc this.sortByPriceButtonSign = ' ' if (this.sortByDateDesc) { this.sortByDateButtonSign = '\u2191' this.addSearchParam(\"ordering\", \"date_added\") } else { this.sortByDateButtonSign = '\u2193' this.addSearchParam(\"ordering\", \"-date_added\") } }, filterBySearchString() { this.addSearchParam(\"search\", this.searchString) }, sortByPriceButtonPressed() { this.sortByPriceDesc = !this.sortByPriceDesc this.sortByDateButtonSign = ' ' if (this.sortByPriceDesc) { this.sortByPriceButtonSign = '\u2191' this.addSearchParam(\"ordering\", \"price\") } else { this.sortByPriceButtonSign = '\u2193' this.addSearchParam(\"ordering\", \"-price\") } }, addSearchParam(param, value) { let newUrl = new URL(this.filterURL) newUrl.searchParams.set(param, value) this.filterURL = newUrl.toString() } } } </script>","title":"CurrencyFiltersBlock.vue - \u0431\u043b\u043e\u043a \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u043f\u043e\u0441\u043a\u0430 \u0432\u0430\u043b\u044e\u0442 \u043d\u0430 \u0440\u0430\u043d\u043a\u0435"},{"location":"labs/lr4/#footerblockvue-","text":"<template> <footer class=\"bg-navbar\"> <div class=\"container\"> <p class=\"col-md-4 mb-0 color-main py-3\">&copy; 2022 Crypto Wallet, Inc</p> </div> </footer> </template> <script> export default { name: \"FooterBlock\" } </script> <style scoped> </style>","title":"FooterBlock.vue - \u0444\u0443\u0442\u0435\u0440"},{"location":"labs/lr4/#headernavbarvue-","text":"<template> <header class=\"p-3 border-bottom bg-navbar\"> <div class=\"container\"> <div class=\"d-flex flex-wrap align-items-baseline justify-content-center\"> <router-link to=\"/\" class=\"navbar-logo\"> <img class=\"filter-logo\" src=\"@/assets/wallet2.svg\" alt=\"Wallet\" width=\"32\" height=\"32\"> crypto wallet </router-link> <ul class=\"nav col-12 col-lg-auto me-lg-auto justify-content-center\"> <li> <router-link to=\"/market\" class=\"nav-link px-3 link-main\">\u0420\u044b\u043d\u043a\u0438</router-link> </li> </ul> <div v-if=\"isAuth\" class=\"btn-group\"> <button @click=\"$router.push({name: 'profile'})\" type=\"button\" class=\"btn btn-main btn-md\"> \u041f\u0440\u043e\u0444\u0438\u043b\u044c </button> <button type=\"button\" class=\"btn btn-md btn-main dropdown-toggle dropdown-toggle-split\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"> <span class=\"visually-hidden\">Toggle Dropdown</span> </button> <ul class=\"dropdown-menu dropdown-menu-dark\"> <li> <button @click=\"$router.push({name: 'profile'})\" class=\"dropdown-item\">\u041f\u0440\u043e\u0444\u0438\u043b\u044c</button> </li> <li> <hr class=\"dropdown-divider\"> </li> <li> <button @click=\"logout\" class=\"dropdown-item\">\u0412\u044b\u0439\u0442\u0438</button> </li> </ul> </div> <div v-else class=\"btn-group\"> <button @click=\"$router.push({name: 'register'})\" type=\"button\" class=\"btn btn-main btn-md\"> \u041f\u0440\u043e\u0444\u0438\u043b\u044c </button> <button type=\"button\" class=\"btn btn-md btn-main dropdown-toggle dropdown-toggle-split\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\"> <span class=\"visually-hidden\">Toggle Dropdown</span> </button> <ul class=\"dropdown-menu dropdown-menu-dark\"> <li><button @click=\"$router.push({name: 'login'})\" class=\"dropdown-item\">\u0412\u043e\u0439\u0442\u0438</button></li> <li> <hr class=\"dropdown-divider\"> </li> <li><button @click=\"$router.push({name: 'register'})\" class=\"dropdown-item\">\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button></li> </ul> </div> </div> </div> </header> </template> <script> import $ from \"jquery\" export default { name: \"HeaderNavBar\", data() { return { isAuth: false } }, created() { this.isAuth = !!localStorage.getItem(\"auth_token\") }, watch: { $route() { this.isAuth = !!localStorage.getItem(\"auth_token\") } }, methods: { logout() { $.ajax({ url: \"http://127.0.0.1:8000/auth/token/logout\", type: \"POST\", success: () => { localStorage.setItem(\"auth_token\", \"\") delete $.ajaxSettings.headers['Authorization'] this.isAuth = false, this.$router.push({name: \"welcome\"}) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) } }) } } } </script> <style scoped> </style>","title":"HeaderNavBar.vue - \u0445\u0435\u0434\u0435\u0440"},{"location":"labs/lr4/#loginformvue-","text":"<template> <form method=\"post\" @submit.prevent=\"login\"> <div class=\"container pb-4\"> <router-link class=\"logo-link\" to=\"/\"> <img class=\"filter-logo\" src=\"@/assets/wallet2.svg\" alt=\"Wallet\" width=\"50\" height=\"50\"> <p class=\"fs-3\">crypto wallet</p> </router-link> </div> <div class=\"form-floating mb-2\"> <input v-model=\"username\" name=\"username\" class=\"form-control\" id=\"floatingInput\" placeholder=\"username\"> <label for=\"floatingInput\">Username</label> </div> <div class=\"form-floating pb-5\"> <input v-model=\"password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"floatingPassword\" placeholder=\"Password\"> <label for=\"floatingPassword\">Password</label> </div> <button class=\"w-100 btn btn-lg btn-main mb-3\" type=\"submit\">Sign in</button> \u041d\u0435\u0442 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0430? <router-link to=\"/register\" class=\"link-side\">\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</router-link> </form> </template> <script> import $ from \"jquery\" export default { name: \"LoginView\", data() { return { username: \"\", password: \"\" } }, methods: { login() { $.ajax({ url: \"http://127.0.0.1:8000/auth/token/login\", type: \"POST\", data: { username: this.username, password: this.password }, success: (response) => { localStorage.setItem(\"auth_token\", response.auth_token) $.ajaxSetup({headers: {'Authorization': \"Token\" + \" \" + response.auth_token}}) this.$router.push({name: \"welcome\"}) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) this.password = \"\" } }) } } } </script> <style> </style>","title":"LoginForm.vue - \u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"labs/lr4/#profileuserblockvue-","text":"<template> <div class=\"container pt-5 pb-3 text-center\"> <div class=\"row pb-3\"> <div class=\"col\"> <h1>\u041f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f {{ user.username }}</h1> </div> </div> <div class=\"row justify-content-center\"> <div class=\"col-auto\"> <button type=\"button\" class=\"btn btn-outline-secondary\" @click=\"this.$router.push({name: 'change_password'})\">\u0421\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c </button> </div> <div class=\"col-auto\"> <button type=\"button\" class=\"btn btn-outline-danger\" @click=\"logout\">\u0412\u044b\u0439\u0442\u0438</button> </div> </div> </div> </template> <script> import $ from \"jquery\" export default { name: \"ProfileUserBlock\", data() { return { user: {} } }, created() { this.loadUser() }, methods: { loadUser() { $.ajax({ url: 'http://127.0.0.1:8000/auth/users/me', type: \"GET\", success: (response) => { this.user = response } }) }, logout() { $.ajax({ url: \"http://127.0.0.1:8000/auth/token/logout\", type: \"POST\", success: () => { localStorage.setItem(\"auth_token\", \"\") delete $.ajaxSettings.headers['Authorization'] this.$router.push({name: \"welcome\"}) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) } }) } } } </script>","title":"ProfileUserBlock.vue - \u0431\u043b\u043e\u043a \u0441 \u043a\u043d\u043e\u043f\u043a\u0430\u043c\u0438 \"\u0432\u044b\u0439\u0442\u0438\" \u0438 \"\u0441\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u0430\u0440\u043e\u043b\u044c\" \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"labs/lr4/#registerformvue-","text":"<template> <form method=\"post\" @submit.prevent=\"register\"> <div class=\"container pb-4\"> <router-link class=\"logo-link\" to=\"/\"> <img class=\"filter-logo\" src=\"@/assets/wallet2.svg\" alt=\"Wallet\" width=\"50\" height=\"50\"> <p class=\"fs-3\">crypto wallet</p> </router-link> </div> <div class=\"input-group mb-2\"> <span class=\"input-group-text bg-side text-light\">@</span> <div class=\"form-floating\"> <input v-model=\"username\" type=\"text\" name=\"username\" class=\"form-control\" id=\"floatingInputGroup1\" placeholder=\"Username\"> <label for=\"floatingInputGroup1\">Username</label> </div> </div> <div class=\"form-floating mb-2\"> <input v-model=\"email\" type=\"email\" name=\"email\" class=\"form-control\" id=\"floatingInput\" placeholder=\"name@example.com\"> <label for=\"floatingInput\">Email address</label> </div> <div class=\"form-floating pb-5\"> <input v-model=\"password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"floatingPassword\" placeholder=\"Password\"> <label for=\"floatingPassword\">Password</label> </div> <button class=\"w-100 btn btn-lg btn-main mb-3\" type=\"submit\">\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f</button> \u0423\u0436\u0435 \u0435\u0441\u0442\u044c \u0430\u043a\u043a\u0430\u0443\u043d\u0442? <router-link to=\"/login\" href=\"signin.html\" class=\"link-side\">\u0412\u043e\u0439\u0442\u0438</router-link> </form> </template> <script> import $ from \"jquery\"; export default { name: \"RegisterForm\", data() { return { username: \"\", email: \"\", password: \"\" } }, methods: { register() { $.ajax({ url: \"http://127.0.0.1:8000/auth/users/\", type: \"POST\", data: { username: this.username, email: this.email, password: this.password }, success: () => { alert(\"\u0412\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438\u0441\u044c!\") this.$router.push({name: \"login\"}) }, error: (response) => { alert(Object.values(response.responseJSON)[0]) this.password = \"\" } }) } } } </script> <style> </style>","title":"RegisterForm.vue - \u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438"},{"location":"labs/lr4/#usercurrencieslistvue-","text":"<template> <div class=\"row row-cols-1 g-4\"> <div class=\"col\"> <div v-for=\"ownership in ownerships\" v-bind:key=\"ownership\" class=\"card shadow-sm my-3\"> <router-link :to=\"'/currency/' + ownership.currency.id\" class=\"btn btn-light card-bg-color text-left\"> <div class=\"row d-flex align-items-center px-4\"> <div class=\"col-5 col-sm-3 col-xl-1 col-lg-2 d-flex justify-content-center\"> <img :src=\"ownership.currency.image\" style=\"max-height:100px; max-width:100px;\" class=\"img rounded-start\" alt=\"{{ownership.currency.name}}\"> </div> <div class=\"col-7 col-sm-9 col-xl-11 col-lg-10\"> <div class=\"card-body\"> <h5 class=\"card-title card-main-color\">{{ ownership.currency.name }}</h5> <div class=\"row row-cols-1 row-cols-lg-2 row-cols-xl-4 pb-3\"> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">1 {{ ownership.currency.abbreviation }}:</small> ${{ parseFloat(ownership.currency.price) }}</p> </div> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">\u0412\u0441\u0435\u0433\u043e \u0432 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u0435:</small> {{ ownership.count }}</p> </div> <div class=\"col\"> <p class=\"card-main-color\"><small class=\"card-muted-color\">\u0426\u0435\u043d\u0430 \u0432 \u043f\u043e\u0440\u0442\u0444\u0435\u043b\u0435:</small> ${{ parseFloat(ownership.currency.price * ownership.count) }}</p> </div> </div> </div> </div> </div> </router-link> </div> </div> </div> </template> <script> export default { name: \"UserCurrenciesList\", props: { ownerships: Array }, } </script>","title":"UserCurrenciesList.vue - \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0432\u0430\u043b\u044e\u0442"},{"location":"labs/lr4/#welcomesectionvue-","text":"<template> <section> <div class=\"container\"> <div class=\"row d-flex align-items-center\"> <div class=\"col-12 col-lg-6\"> <div class=\"menu-image h-100 d-flex align-items-start\"> <img src=\"@/assets/crypto-currency-isometric-design.png\" class=\"img-fluid\" alt=\"menu image\"> </div> </div> <div class=\"col-12 col-lg-6\"> <div class=\"menu-text flex-grow-1 py-2 px-5\"> <div class=\"py-4\"> <h2 class=\"text-left\">\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u0440\u0438\u043f\u0442\u043e\u043f\u043e\u0440\u0442\u0444\u0435\u043b\u044c</h2> <p class=\"fw-lighter fs-4\">\u0417\u0430 \u0442\u0440\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0448\u0430\u0433\u0430</p> </div> <div class=\"menu-content\"> <h3 class=\"h3-text-color py-2\">1. \u041f\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u0448\u0435\u043b\u0435\u043a</h3> <p class=\"fw-lighter\">\u041f\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u043d\u044b\u0439 \u043a\u043e\u0448\u0435\u043b\u0435\u043a \u0438 \u043d\u0430\u0447\u043d\u0438\u0442\u0435 \u0442\u043e\u0440\u0433\u043e\u0432\u0430\u0442\u044c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u043e\u0439. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u0448\u0435\u043b\u0435\u043a \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438.</p> </div> <div class=\"menu-content\"> <h3 class=\"h3-text-color py-2\">2. \u041f\u0440\u043e\u0439\u0434\u0438\u0442\u0435 \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e</h3> <p class=\"fw-lighter\">\u041f\u0440\u043e\u0439\u0434\u0438\u0442\u0435 \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043b\u0438\u0447\u043d\u043e\u0441\u0442\u0438, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0449\u0438\u0442\u0438\u0442\u044c \u0441\u0432\u043e\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0438 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438.</p> </div> <div class=\"menu-content\"> <h3 class=\"h3-text-color py-2\">3. \u041d\u0430\u0447\u0438\u043d\u0430\u0439\u0442\u0435</h3> <p class=\"fw-lighter\">\u0412\u0441\u0435 \u0433\u043e\u0442\u043e\u0432\u043e! \u041f\u043e\u043a\u0443\u043f\u0430\u0439\u0442\u0435/\u043f\u0440\u043e\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0443, \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0439\u0442\u0435 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043f\u043e\u043a\u0443\u043f\u043a\u0438 \u0434\u043b\u044f \u0438\u043d\u0432\u0435\u0441\u0442\u0438\u0446\u0438\u0439.</p> </div> </div> <button @click=\"checkAuthForStart\" type=\"button\" class=\"btn btn-lg btn-main my-5 mx-5\"> \u041d\u0430\u0447\u0430\u0442\u044c! </button> </div> </div> </div> </section> </template> <script> export default { name: \"WelcomeSection\", methods: { checkAuthForStart() { if (localStorage.getItem(\"auth_token\")) { this.$router.push({name: \"market\"}) } else { this.$router.push({name: \"login\"}) } } } } </script> <style scoped> </style>","title":"WelcomeSection.vue - \u0441\u0435\u043a\u0446\u0438\u044f \u0441 \u043a\u0440\u0430\u0442\u043a\u043e\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439 \u043f\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044e \u0441\u0430\u0439\u0442\u0430"},{"location":"labs/lr4/#views","text":"","title":"Views"},{"location":"labs/lr4/#changepasswordviewvue-","text":"<template> <ChangePasswordForm/> </template> <script> import ChangePasswordForm from \"../components/ChangePasswordForm.vue\"; export default { name: \"ChangePasswordView\", components: { ChangePasswordForm } } </script>","title":"ChangePasswordView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0441\u043c\u0435\u043d\u044b \u043f\u0430\u0440\u043e\u043b\u044f"},{"location":"labs/lr4/#currencyviewvue-","text":"<template> <div class=\"container py-5\"> <div class=\"row row-cols-2\"> <div class=\"col-12 pb-3\"> <CurrencyChart :currency_coinlib_id=\"currency.coinlib_id\"/> </div> <BuySellButtonsBlock :currency=\"currency\" v-if=\"currency\"/> </div> </div> </template> <script> import $ from \"jquery\" import CurrencyChart from \"../components/CurrencyChart.vue\"; import BuySellButtonsBlock from \"../components/BuySellButtonsBlock.vue\"; export default { name: \"CurrencyView\", data() { return { currency: {} } }, created() { this.loadCurrency(this.$route.params.id) }, methods: { loadCurrency(id) { $.ajax({ url: `http://127.0.0.1:8000/currencies/${id}/`, type: \"GET\", success: (response) => { this.currency = response } }) } }, components: { CurrencyChart, BuySellButtonsBlock } } </script>","title":"CurrencyView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0430\u043b\u044e\u0442\u0435 \u0438 \u0432\u044b\u043f\u043e\u043b\u0435\u043d\u0438\u044f \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0439"},{"location":"labs/lr4/#loginviewvue-","text":"<template> <LoginForm/> </template> <script> import LoginForm from \"../components/LoginForm.vue\"; export default { name: \"LoginView\", components: { LoginForm } } </script>","title":"LoginView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"labs/lr4/#marketviewvue-","text":"<template> <section> <div class=\"container pt-5 pb-3\"> <h1> \u0420\u044b\u043d\u043e\u043a \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u044b </h1> </div> <hr class=\"featurette-divider\"> <CurrencyFiltersBlock :baseURL=\"baseURL\" @response=\"(loadURL) => loadCurrencies(loadURL)\" /> <div class=\"container py-5\"> <CurrenciesList :currencies=\"currencies\"/> </div> </section> </template> <script> import $ from \"jquery\" import CurrenciesList from \"../components/CurrenciesList.vue\"; import CurrencyFiltersBlock from \"../components/CurrencyFiltersBlock.vue\"; export default { name: \"MarketView\", data() { return { currencies: [], baseURL: 'http://127.0.0.1:8000/currencies/' } }, created() { this.loadCurrencies(this.baseURL) }, methods: { loadCurrencies(url) { $.ajax({ url: url, type: \"GET\", success: (response) => { this.currencies = response } }) } }, components: { CurrenciesList, CurrencyFiltersBlock } } </script>","title":"MarketView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0440\u044b\u043d\u043a\u0430 \u0432\u0430\u043b\u044e\u0442\u044b"},{"location":"labs/lr4/#profileviewvue-","text":"<template> <ProfileUserBlock/> <hr class=\"featurette-divider\"> <div class=\"container py-3\"> <div class=\"row row-cols-1 g-4\"> <UserCurrenciesList :ownerships=\"ownerships\"/> </div> </div> </template> <script> import $ from \"jquery\" import UserCurrenciesList from \"../components/UserCurrenciesList.vue\"; import ProfileUserBlock from \"../components/ProfileUserBlock.vue\"; export default { name: \"ProfileView\", components: { UserCurrenciesList, ProfileUserBlock }, data() { return { ownerships: [] } }, created() { this.loadOwnerships() }, methods: { loadOwnerships() { $.ajax({ url: 'http://127.0.0.1:8000/ownerships', type: \"GET\", success: (response) => { this.ownerships = response } }) } } } </script>","title":"ProfileView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435-\u043f\u0440\u043e\u0444\u0438\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"labs/lr4/#registerviewvue-","text":"<template> <RegisterForm/> </template> <script> import RegisterForm from \"../components/RegisterForm.vue\"; export default { name: \"RegisterView\", components: { RegisterForm } } </script>","title":"RegisterView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438"},{"location":"labs/lr4/#welcomeviewvue-","text":"<template> <WelcomeSection/> <section> <div class=\"container py-5\"> <div class=\"d-flex justify-content-center pb-5\"> <h2>\u041a\u0443\u043f\u0438\u0442\u044c \u043a\u0440\u0438\u043f\u0442\u043e\u0432\u0430\u043b\u044e\u0442\u0443</h2> </div> <CurrenciesList :currencies=\"currencies\"/> <div class=\"d-flex justify-content-center pt-4\"> <div tabindex=\"0\"> <router-link to=\"/market\" class=\"link-side\"> \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 </router-link> </div> </div> </div> </section> </template> <script> import $ from \"jquery\" import WelcomeSection from \"../components/WelcomeSection.vue\"; import CurrenciesList from \"../components/CurrenciesList.vue\"; export default { name: \"WelcomeView\", components: { WelcomeSection, CurrenciesList }, data() { return { currencies: [] } }, created() { this.loadPopularCurrencies() }, methods: { loadPopularCurrencies() { $.ajax({ url: \"http://127.0.0.1:8000/currencies/popular/\", type: \"GET\", success: (response) => { this.currencies = response } }) } } } </script> <style scoped> </style>","title":"WelcomeView.vue - \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 - \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0439 \u044d\u043a\u0440\u0430\u043d"},{"location":"labs/lr4/#layouts","text":"\u0412 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0434\u0432\u0430 \u043b\u044d\u0439\u0430\u0443\u0442\u0430: \u0411\u0430\u0437\u043e\u0432\u044b\u0439 DefaultLayout.vue <template> <HeaderNavBar/> <main class=\"min-vh-100\"> <slot/> </main> <FooterBlock/> </template> <script> import HeaderNavBar from \"../components/HeaderNavBar.vue\"; import FooterBlock from \"../components/FooterBlock.vue\"; export default { name: \"DefaultLayout\", components: { HeaderNavBar, FooterBlock } } </script> \u041b\u044d\u0439\u0430\u0443\u0442 \u0434\u043b\u044f \u0444\u043e\u0440\u043c AuthLayout.vue <template> <main class=\"text-center sign-body\"> <div class=\"sign-form w-100 m-auto\"> <slot/> </div> </main> </template> <script> export default { name: \"AuthLayout\" } </script> \u0410 \u0442\u0430\u043a\u0436\u0435 \u0435\u0441\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0444\u0430\u0439\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442 Layout \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0435\u0442\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f AppLayout.vue <template> <component :is=\"layout\"> <slot /> </component> </template> <script> import DefaultLayout from \"./DefaultLayout.vue\"; import {shallowRef, watch} from 'vue' import { useRoute } from 'vue-router' export default { name: 'AppLayout', setup() { const layout = shallowRef(DefaultLayout) const route = useRoute() watch( () => route.meta, async meta => { try { const component = await import(`../layouts/${meta.layout}.vue`) layout.value = component?.default || DefaultLayout } catch (e) { layout.value = DefaultLayout } }, { immediate: true } ) return { layout } } } </script>","title":"Layouts"}]}